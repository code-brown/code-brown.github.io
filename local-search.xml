<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JJWT 0.12.6更新学习</title>
    <link href="/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>最近学习JWT时遇到许多方法显示已弃用,JWT更新速度非常快,网上的教程和AI回复大多缺乏时效性,因此我记录下更新学习的过程;本文参考JWT GitHub首页:</p><p><a href="https://github.com/jwtk/jjwt?tab=readme-ov-file">https://github.com/jwtk/jjwt?tab=readme-ov-file</a></p><p>;并感谢ChatGPT提供了详尽的解释.</p><p>JWT基础知识:</p><p><strong>JWT (JSON Web Token)</strong>:** 是一种基于JSON的令牌，用于在网络应用中安全地传输信息。它通常用于身份验证和授权。JWT由三部分组成：<code>Header</code>、<code>Payload</code> 和 <code>Signature</code>，通过点号（<code>.</code>）分隔。JWT可以确保数据的完整性（不可篡改）并通过加密保证敏感信息的安全。</p><table><thead><tr><th align="left"><strong>部分</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>Header</strong></td><td>定义了JWT的元数据，主要包括签名算法和令牌类型。</td><td><code>json&lt;br&gt;&#123;&lt;br&gt; &quot;alg&quot;: &quot;HS256&quot;,&lt;br&gt; &quot;typ&quot;: &quot;JWT&quot;&lt;br&gt;&#125;</code></td></tr><tr><td align="left"><strong>Payload</strong></td><td>包含实际传递的数据（声明），可以包括注册声明、公共声明和私有声明。</td><td><code>json&lt;br&gt;&#123;&lt;br&gt; &quot;sub&quot;: &quot;1234567890&quot;,&lt;br&gt; &quot;name&quot;: &quot;John Doe&quot;,&lt;br&gt; &quot;admin&quot;: true,&lt;br&gt; &quot;exp&quot;: 1516239022&lt;br&gt;&#125;</code></td></tr><tr><td align="left"><strong>Signature</strong></td><td>用于验证JWT的完整性和真实性，通过对Header和Payload进行签名生成。</td><td><code>HMACSHA256(base64UrlEncode(Header) + &quot;.&quot; + base64UrlEncode(Payload), secret)</code></td></tr></tbody></table><p><strong>JJWT(Java JWT)</strong>:** 是一个Java库，用于创建和验证JWT（JSON Web Token）。它简化了在Java应用中使用JWT的过程。JJWT由一个开源社区开发，支持生成、解析和验证JWT的功能。本文学习的是最新的JJWT。</p><p><strong>JWS(JSON Web Signature):</strong> 是一种用来生成和验证数字签名的标准，基于JSON格式。JWS确保了数据的完整性和真实性。JWT的签名部分实际上就是使用了JWS。</p><p><strong>JWE(JSON Web Encryption)</strong>: 是一种用来加密数据的标准，也基于JSON格式。JWE与JWS不同之处在于，JWS保证数据的完整性（数据不可篡改），而JWE确保数据的机密性（数据加密后不可被读取）。</p><p>1.引入依赖</p><p>引入JWT最新的maven依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson <span class="hljs-keyword">if</span> Gson is preferred --&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2.生成JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生成一个HS256算法的密钥</span><br><span class="hljs-type">SecretKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Jwts.SIG.HS256.key().build();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">jws</span> <span class="hljs-operator">=</span> Jwts.builder()<br>           <span class="hljs-comment">// 设置JWT的主体部分，通常包含用户标识</span><br>           .subject(<span class="hljs-string">&quot;sub&quot;</span>) <br>           <br>           <span class="hljs-comment">// 添加自定义声明</span><br>           .claim(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>)<br>           <br>           <span class="hljs-comment">// 生成的密钥对JWT进行签名</span><br>           .signWith(key)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行者信息</span><br>           .issuer(<span class="hljs-string">&quot;example.com&quot;</span>)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行时间</span><br>           .issuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>           <br>           <span class="hljs-comment">// 设置JWT的过期时间，这里设置为当前时间加1小时</span><br>           .expiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">3600000</span>))<br>           <br>           <span class="hljs-comment">//生成最终的JWT字符串</span><br>           .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.解析JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Jws&lt;Claims&gt; claimsJws = Jwts.parser()<br>        <span class="hljs-comment">// 使用指定的密钥验证JWT的签名</span><br>        .verifyWith(key)<br>        .build()<br>        <span class="hljs-comment">// 解析JWT并验证其签名，返回包含claims的Jws对象</span><br>        .parseSignedClaims(jws);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java Spring JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring  Vue3实现ToDoList待办事项列表</title>
    <link href="/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/"/>
    <url>/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/10/23/test/"/>
    <url>/2024/10/23/test/</url>
    
    <content type="html"><![CDATA[<p>宣州谢朓楼饯别校书叔云</p><p>李白</p><p>弃我去者，昨日之日不可留;乱我心者，今日之日多烦忧。</p><p>长风万里送秋雁，对此可以酣高楼。</p><p>蓬莱文章建安骨，中间小谢又清发。</p><p>俱怀逸兴壮思飞，欲上青天览明月。</p><p>抽刀断水水更流，举杯消愁愁更愁。</p><p>人生在世不称意，明朝散发弄扁舟。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
