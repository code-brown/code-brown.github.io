<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux硬盘综合配置</title>
    <link href="/2025/05/15/Linux%E7%A1%AC%E7%9B%98%E7%BB%BC%E5%90%88%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/05/15/Linux%E7%A1%AC%E7%9B%98%E7%BB%BC%E5%90%88%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E4%B8%80-%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">硬盘与存储基础理论</a></li><li><a href="#%E4%BA%8C-%E8%AE%BE%E5%A4%87%E8%AF%86%E5%88%AB%E4%B8%8E%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99">设备识别与命名规则</a></li><li><a href="#%E4%B8%89-%E5%88%86%E5%8C%BA%E8%A1%A8%E7%B1%BB%E5%9E%8B-mbr-%E4%B8%8E-gpt-%E7%90%86%E8%AE%BA%E6%AF%94%E8%BE%83">分区表类型：MBR 与 GPT 理论比较</a></li><li><a href="#%E5%9B%9B-%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7%E5%8F%8A%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3">分区工具及命令详解</a><ul><li><code>fdisk</code></li><li><code>parted</code></li><li><code>cfdisk</code></li></ul></li><li><a href="#%E4%BA%94-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5">文件系统原理与实践</a></li><li><a href="#%E5%85%AD-%E6%8C%82%E8%BD%BD%E5%8E%9F%E7%90%86%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BDfstab">挂载原理与自动挂载（fstab）</a></li><li><a href="#%E4%B8%83-lvm-%E7%90%86%E8%AE%BA%E4%B8%8E%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B">LVM 理论与操作流程</a></li><li><a href="#%E5%85%AB-%E8%BD%AF%E4%BB%B6-raid-%E5%8E%9F%E7%90%86%E4%B8%8E%E9%83%A8%E7%BD%B2mdadm">软件 RAID 原理与部署（mdadm）</a></li><li><a href="#%E4%B9%9D-%E7%A3%81%E7%9B%98%E6%89%A9%E5%B1%95%E4%B8%8E%E5%9C%A8%E7%BA%BF%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95">磁盘扩展与在线调整方法</a></li><li><a href="#%E5%8D%81-%E5%BF%AB%E7%85%A7%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AD%96%E7%95%A5">快照与备份策略</a></li><li><a href="#%E5%8D%81%E4%B8%80-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E4%BC%98%E5%8C%96">性能监控与优化</a></li><li><a href="#%E5%8D%81%E4%BA%8C-%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">常见故障排查与解决方案</a></li><li><a href="#%E5%8D%81%E4%B8%89-%E6%89%A9%E5%B1%95%E5%B7%A5%E5%85%B7%E4%B8%8E%E9%9B%86%E6%88%90%E5%AE%9E%E8%B7%B5">扩展工具与集成实践</a></li></ol><hr><h2 id="一、硬盘与存储基础理论"><a href="#一、硬盘与存储基础理论" class="headerlink" title="一、硬盘与存储基础理论"></a>一、硬盘与存储基础理论</h2><p>在 Linux 系统中，所有设备和文件均以文件形式表现，硬盘作为一种块设备（block device）负责数据的持久存储。理解块设备底层结构和操作模式是高效管理存储的前提。</p><ul><li><p><strong>块设备 VS 字符设备</strong>：  </p><ul><li>块设备（如硬盘、SSD）以固定大小的数据块为单位进行随机访问。  </li><li>字符设备（如串口、键盘）按字符流传输，通常不支持随机访问。</li></ul></li><li><p><strong>扇区（Sector）与块（Block）</strong>：  </p><ul><li>硬盘最小读写单元是扇区，传统上为 512 Byte，新型设备可为 4KB。  </li><li>文件系统中的块大小（Block）通常为 4KB，与扇区大小相匹配以提高效率。</li></ul></li><li><p><strong>I&#x2F;O 调度与缓存</strong>：  </p><ul><li>Linux 内核通过 I&#x2F;O 调度器（cfq, deadline, noop）管理请求队列，影响吞吐和延迟。  </li><li>Page Cache 提供读写缓存，加速文件系统访问。</li></ul></li></ul><hr><h2 id="二、设备识别与命名规则"><a href="#二、设备识别与命名规则" class="headerlink" title="二、设备识别与命名规则"></a>二、设备识别与命名规则</h2><h3 id="1-查看已挂载设备"><a href="#1-查看已挂载设备" class="headerlink" title="1. 查看已挂载设备"></a>1. 查看已挂载设备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk -o NAME,SIZE,FSTYPE,TYPE,MOUNTPOINT<br></code></pre></td></tr></table></figure><ul><li><code>-o</code>：指定输出列  </li><li>常见列：NAME（设备名）、SIZE（大小）、FSTYPE（文件系统类型）</li></ul><h3 id="2-设备命名规则"><a href="#2-设备命名规则" class="headerlink" title="2. 设备命名规则"></a>2. 设备命名规则</h3><ul><li><strong>SATA&#x2F;SCSI</strong>：<code>/dev/sd[a-z]</code>，如 <code>/dev/sda</code>, <code>/dev/sdb1</code>  </li><li><strong>NVMe SSD</strong>：<code>/dev/nvme0n1</code>, 分区如 <code>nvme0n1p1</code>  </li><li><strong>MMC&#x2F;eMMC</strong>：<code>/dev/mmcblk0</code>, 分区如 <code>mmcblk0p1</code></li></ul><hr><h2 id="四、分区工具及命令详解"><a href="#四、分区工具及命令详解" class="headerlink" title="四、分区工具及命令详解"></a>四、分区工具及命令详解</h2><h3 id="1-fdisk"><a href="#1-fdisk" class="headerlink" title="1. fdisk"></a>1. <code>fdisk</code></h3><p>适用范围：MBR 与 GPT。常用于快速分区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fdisk /dev/sda<br></code></pre></td></tr></table></figure><p>启动后关键命令：</p><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>显示</td><td><code>p</code></td><td>打印当前分区表</td></tr><tr><td>新建</td><td><code>n</code></td><td>创建主分区或逻辑分区</td></tr><tr><td>删除</td><td><code>d</code></td><td>删除指定分区</td></tr><tr><td>修改</td><td><code>t</code></td><td>修改分区类型（如 Linux LVM）</td></tr><tr><td>写入</td><td><code>w</code></td><td>保存并退出</td></tr><tr><td>退出</td><td><code>q</code></td><td>不保存退出</td></tr></tbody></table><h2 id="五、文件系统原理与实践"><a href="#五、文件系统原理与实践" class="headerlink" title="五、文件系统原理与实践"></a>五、文件系统原理与实践</h2><h3 id="1-文件系统类型比较"><a href="#1-文件系统类型比较" class="headerlink" title="1. 文件系统类型比较"></a>1. 文件系统类型比较</h3><table><thead><tr><th>类型</th><th>特点</th><th>场景</th></tr></thead><tbody><tr><td>ext4</td><td>稳定、广泛支持</td><td>一般服务器</td></tr><tr><td>XFS</td><td>高并发、延迟低</td><td>大规模存储与并发</td></tr><tr><td>btrfs</td><td>支持子卷、快照、校验</td><td>行业存档、快照需求</td></tr><tr><td>vfat&#x2F;ext3</td><td>兼容多平台，功能有限</td><td>U 盘、移动存储</td></tr></tbody></table><h3 id="2-创建文件系统"><a href="#2-创建文件系统" class="headerlink" title="2. 创建文件系统"></a>2. 创建文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mkfs.ext4 -L data1 /dev/sda1<br></code></pre></td></tr></table></figure><ul><li><code>-L</code>：设置卷标  </li><li><code>-m 1%</code>：保留 1% 空间防止被普通用户占满  </li><li><code>tune2fs -O ^has_journal</code>: 可禁用 ext4 日志模式</li></ul><h3 id="3-检查与修复"><a href="#3-检查与修复" class="headerlink" title="3. 检查与修复"></a>3. 检查与修复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fsck.ext4 -f /dev/sda1<br></code></pre></td></tr></table></figure><ul><li><code>-f</code>：强制检查  </li><li>对 XFS 使用 <code>xfs_repair</code></li></ul><hr><h2 id="六、挂载原理与自动挂载（fstab）"><a href="#六、挂载原理与自动挂载（fstab）" class="headerlink" title="六、挂载原理与自动挂载（fstab）"></a>六、挂载原理与自动挂载（fstab）</h2><h3 id="1-临时挂载"><a href="#1-临时挂载" class="headerlink" title="1. 临时挂载"></a>1. 临时挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -t ext4 /dev/sda1 /mnt/data -o noatime,compress<br></code></pre></td></tr></table></figure><ul><li><code>-t</code>：指定文件系统类型  </li><li><code>-o</code>：挂载选项</li><li><code>noatime</code> 不更新访问时间</li><li><code>compress</code>（btrfs）</li></ul><h3 id="2-etc-fstab-配置"><a href="#2-etc-fstab-配置" class="headerlink" title="2. /etc/fstab 配置"></a>2. <code>/etc/fstab</code> 配置</h3><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &lt;设备&gt;       &lt;挂载点&gt; &lt;文件系统&gt; options         dump fsck</span><br>UUID=xxxx-xx  /data     ext4       defaults,noatime 0    2<br>/dev/sdb1     /backup   xfs        rw,nodev         0    0<br></code></pre></td></tr></table></figure><ul><li><code>dump</code>：是否备份  </li><li><code>fsck</code>：启动时检查顺序</li></ul><h3 id="3-自动挂载与测试"><a href="#3-自动挂载与测试" class="headerlink" title="3. 自动挂载与测试"></a>3. 自动挂载与测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -a<br></code></pre></td></tr></table></figure><ul><li>若有错误，<code>mount -a</code> 会打印日志，便于排查。</li></ul><hr><h2 id="七、LVM-理论与操作流程"><a href="#七、LVM-理论与操作流程" class="headerlink" title="七、LVM 理论与操作流程"></a>七、LVM 理论与操作流程</h2><h3 id="1-LVM-基本概念"><a href="#1-LVM-基本概念" class="headerlink" title="1. LVM 基本概念"></a>1. LVM 基本概念</h3><ul><li><strong>PV（Physical Volume）</strong>：物理卷，底层分区或整盘  </li><li><strong>VG（Volume Group）</strong>：卷组，将多个 PV 聚合  </li><li><strong>LV（Logical Volume）</strong>：逻辑卷，从 VG 中切分使用</li></ul><p>优势：在线扩容、快照、灵活管理。</p><h3 id="2-操作流程"><a href="#2-操作流程" class="headerlink" title="2. 操作流程"></a>2. 操作流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> yum install -y lvm2<br><br><span class="hljs-comment"># 初始化 PV</span><br><span class="hljs-built_in">sudo</span> pvcreate /dev/sdb1 /dev/sdc1<br><br><span class="hljs-comment"># 创建 VG</span><br><span class="hljs-built_in">sudo</span> vgcreate vg_data /dev/sdb1 /dev/sdc1<br><br><span class="hljs-comment"># 创建 LV</span><br><span class="hljs-built_in">sudo</span> lvcreate -n lv_docs -L 100G vg_data<br><br><span class="hljs-comment"># 格式化与挂载</span><br><span class="hljs-built_in">sudo</span> mkfs.ext4 /dev/vg_data/lv_docs<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/docs<br><span class="hljs-built_in">sudo</span> mount /dev/vg_data/lv_docs /mnt/docs<br></code></pre></td></tr></table></figure><h3 id="3-扩展与缩减"><a href="#3-扩展与缩减" class="headerlink" title="3. 扩展与缩减"></a>3. 扩展与缩减</h3><ul><li><p>扩展 LV：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> lvextend -L +50G /dev/vg_data/lv_docs<br><span class="hljs-built_in">sudo</span> resize2fs /dev/vg_data/lv_docs<br></code></pre></td></tr></table></figure></li><li><p>缩减 LV：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /mnt/docs<br><span class="hljs-built_in">sudo</span> e2fsck -f /dev/vg_data/lv_docs<br><span class="hljs-built_in">sudo</span> resize2fs /dev/vg_data/lv_docs 80G<br><span class="hljs-built_in">sudo</span> lvreduce -L 80G /dev/vg_data/lv_docs<br><span class="hljs-built_in">sudo</span> mount /dev/vg_data/lv_docs /mnt/docs<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="八、软件-RAID-原理与部署（mdadm）"><a href="#八、软件-RAID-原理与部署（mdadm）" class="headerlink" title="八、软件 RAID 原理与部署（mdadm）"></a>八、软件 RAID 原理与部署（mdadm）</h2><h3 id="1-RAID-理论"><a href="#1-RAID-理论" class="headerlink" title="1. RAID 理论"></a>1. RAID 理论</h3><ul><li>RAID 0：条带，性能提升，无冗余  </li><li>RAID 1：镜像，高可用，空间利用率 50%  </li><li>RAID 5&#x2F;6：分布式校验，提高冗余和空间利用  </li><li>RAID 10：镜像+条带，兼具性能与冗余</li></ul><h3 id="2-部署示例（RAID-1）"><a href="#2-部署示例（RAID-1）" class="headerlink" title="2. 部署示例（RAID 1）"></a>2. 部署示例（RAID 1）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sdd1 /dev/sde1<br></code></pre></td></tr></table></figure><ul><li><code>--create</code>：新建阵列  </li><li><code>--level=1</code>：镜像模式  </li><li><code>--raid-devices</code>：参与设备数量</li></ul><h3 id="3-阵列管理"><a href="#3-阵列管理" class="headerlink" title="3. 阵列管理"></a>3. 阵列管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看状态</span><br><span class="hljs-built_in">cat</span> /proc/mdstat<br><span class="hljs-built_in">sudo</span> mdadm --detail /dev/md0<br><br><span class="hljs-comment"># 保存配置</span><br><span class="hljs-built_in">sudo</span> mdadm --detail --scan | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> -a /etc/mdadm.conf<br></code></pre></td></tr></table></figure><hr><h2 id="九、磁盘扩展与在线调整方法"><a href="#九、磁盘扩展与在线调整方法" class="headerlink" title="九、磁盘扩展与在线调整方法"></a>九、磁盘扩展与在线调整方法</h2><ol><li><p><strong>虚拟机磁盘扩展</strong>：在虚拟化平台调整磁盘大小  </p></li><li><p><strong>内核重扫描</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /sys/class/block/sda/device/rescan<br></code></pre></td></tr></table></figure></li><li><p><strong>调整分区</strong>：使用 <code>parted resizepart</code> 或删除重建分区  </p></li><li><p><strong>扩展文件系统</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> resize2fs /dev/sda1      <span class="hljs-comment"># ext4</span><br><span class="hljs-built_in">sudo</span> xfs_growfs /mnt/data     <span class="hljs-comment"># XFS</span><br></code></pre></td></tr></table></figure></li><li><p><strong>在线扩容 LVM</strong>：参考第七章节</p></li></ol><hr><h2 id="十、快照与备份策略"><a href="#十、快照与备份策略" class="headerlink" title="十、快照与备份策略"></a>十、快照与备份策略</h2><h3 id="1-LVM-快照"><a href="#1-LVM-快照" class="headerlink" title="1. LVM 快照"></a>1. LVM 快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> lvcreate -s -n snap_docs -L 10G /dev/vg_data/lv_docs<br></code></pre></td></tr></table></figure><ul><li><code>-s</code>：创建快照  </li><li>快照为 CoW（写时复制）模式</li></ul><h3 id="2-备份流程"><a href="#2-备份流程" class="headerlink" title="2. 备份流程"></a>2. 备份流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/snap<br><span class="hljs-built_in">sudo</span> mount /dev/vg_data/snap_docs /mnt/snap<br>rsync -av --delete /mnt/snap/ /backup/docs/<br></code></pre></td></tr></table></figure><h3 id="3-删除快照"><a href="#3-删除快照" class="headerlink" title="3. 删除快照"></a>3. 删除快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /mnt/snap<br><span class="hljs-built_in">sudo</span> lvremove /dev/vg_data/snap_docs<br></code></pre></td></tr></table></figure><hr><h2 id="十一、性能监控与优化"><a href="#十一、性能监控与优化" class="headerlink" title="十一、性能监控与优化"></a>十一、性能监控与优化</h2><h3 id="1-SMART-健康检测"><a href="#1-SMART-健康检测" class="headerlink" title="1. SMART 健康检测"></a>1. SMART 健康检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> smartctl -a /dev/sda<br></code></pre></td></tr></table></figure><ul><li>查看设备温度、错误日志与寿命指标</li></ul><h3 id="2-I-O-性能测试"><a href="#2-I-O-性能测试" class="headerlink" title="2. I&#x2F;O 性能测试"></a>2. I&#x2F;O 性能测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 读缓存测试</span><br><span class="hljs-built_in">sudo</span> hdparm -Tt /dev/sda<br><br><span class="hljs-comment"># 直写测试</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/mnt/data/test bs=1G count=1 oflag=direct<br></code></pre></td></tr></table></figure><h3 id="3-实时监控"><a href="#3-实时监控" class="headerlink" title="3. 实时监控"></a>3. 实时监控</h3><ul><li><code>iostat -xz 1</code></li><li><code>iotop</code></li><li><code>dstat</code></li></ul><hr><h2 id="十二、常见故障排查与解决方案"><a href="#十二、常见故障排查与解决方案" class="headerlink" title="十二、常见故障排查与解决方案"></a>十二、常见故障排查与解决方案</h2><ol><li><strong>分区表损坏</strong>：使用 <code>testdisk</code> 或 <code>gdisk recovery</code> 恢复  </li><li><strong>文件系统损坏</strong>：运行 <code>fsck</code>，或使用指定工具修复  </li><li><strong>LVM 无法识别 PV</strong>：检查 PV 元数据 <code>pvdisplay</code>  </li><li><strong>RAID 降级至 degraded</strong>：<code>mdadm --manage --add</code> 重新加入设备  </li><li><strong>挂载卡顿或失败</strong>：检查日志 <code>dmesg</code> 与 <code>/var/log/syslog</code></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>-linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LAMP(Linux, Apache, MariaDB, PHP) 配置 WordPress 教程</title>
    <link href="/2025/05/14/LAMP-Linux-Apache-MariaDB-PHP-CentOS-%E9%85%8D%E7%BD%AE-WordPress-%E6%95%99%E7%A8%8B/"/>
    <url>/2025/05/14/LAMP-Linux-Apache-MariaDB-PHP-CentOS-%E9%85%8D%E7%BD%AE-WordPress-%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>在 CentOS 上使用 LAMP（Linux, Apache, MariaDB, PHP）环境部署 WordPress。</p><h2 id="1-系统与环境准备"><a href="#1-系统与环境准备" class="headerlink" title="1. 系统与环境准备"></a>1. 系统与环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum update -y<br></code></pre></td></tr></table></figure><h2 id="2-安装-Apache（HTTPD）"><a href="#2-安装-Apache（HTTPD）" class="headerlink" title="2. 安装 Apache（HTTPD）"></a>2. 安装 Apache（HTTPD）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install httpd -y<br><span class="hljs-built_in">sudo</span> systemctl start httpd<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> httpd<br><span class="hljs-built_in">sudo</span> systemctl status httpd<br></code></pre></td></tr></table></figure><h2 id="3-安装并配置-MariaDB（MySQL）"><a href="#3-安装并配置-MariaDB（MySQL）" class="headerlink" title="3. 安装并配置 MariaDB（MySQL）"></a>3. 安装并配置 MariaDB（MySQL）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install mariadb-server mariadb -y<br><span class="hljs-built_in">sudo</span> systemctl start mariadb<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> mariadb<br><span class="hljs-built_in">sudo</span> mysql_secure_installation<br></code></pre></td></tr></table></figure><p>“需要先删除MySQL”</p><h2 id="4-安装-PHP-及常用扩展"><a href="#4-安装-PHP-及常用扩展" class="headerlink" title="4. 安装 PHP 及常用扩展"></a>4. 安装 PHP 及常用扩展</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install epel-release yum-utils -y<br><span class="hljs-built_in">sudo</span> yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm -y<br><span class="hljs-built_in">sudo</span> yum-config-manager --<span class="hljs-built_in">enable</span> remi-php73<br><span class="hljs-built_in">sudo</span> yum install php php-mysqlnd php-fpm php-gd php-xml php-mbstring php-opcache php-json php-intl -y<br><span class="hljs-built_in">sudo</span> systemctl restart httpd<br></code></pre></td></tr></table></figure><p>创建 info.php 测试页：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-配置防火墙与-SELinux（可选）"><a href="#5-配置防火墙与-SELinux（可选）" class="headerlink" title="5. 配置防火墙与 SELinux（可选）"></a>5. 配置防火墙与 SELinux（可选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-service=http<br><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-service=https<br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br><span class="hljs-built_in">sudo</span> yum install policycoreutils-python-utils -y<br><span class="hljs-built_in">sudo</span> semanage fcontext -a -t httpd_sys_rw_content_t <span class="hljs-string">&quot;/var/www/html/wordpress(/.*)?&quot;</span><br><span class="hljs-built_in">sudo</span> restorecon -Rv /var/www/html/wordpress<br></code></pre></td></tr></table></figure><h2 id="6-下载并部署-WordPress"><a href="#6-下载并部署-WordPress" class="headerlink" title="6. 下载并部署 WordPress"></a>6. 下载并部署 WordPress</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br>wget https://wordpress.org/latest.tar.gz<br>tar -zxvf latest.tar.gz<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> wordpress /var/www/html/<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R apache:apache /var/www/html/wordpress<br><span class="hljs-built_in">sudo</span> find /var/www/html/wordpress -<span class="hljs-built_in">type</span> d -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">chmod</span> 755 &#123;&#125; \;<br><span class="hljs-built_in">sudo</span> find /var/www/html/wordpress -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">chmod</span> 644 &#123;&#125; \;<br></code></pre></td></tr></table></figure><h2 id="7-创建-WordPress-数据库与用户"><a href="#7-创建-WordPress-数据库与用户" class="headerlink" title="7. 创建 WordPress 数据库与用户"></a>7. 创建 WordPress 数据库与用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE wpdb <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;wpuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;wppassword&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> wpdb.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;wpuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h2 id="8-配置-Apache-虚拟主机"><a href="#8-配置-Apache-虚拟主机" class="headerlink" title="8. 配置 Apache 虚拟主机"></a>8. 配置 Apache 虚拟主机</h2><p>创建 <code>/etc/httpd/conf.d/wordpress.conf</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>    <span class="hljs-attribute">ServerName</span> example.com<br>    <span class="hljs-attribute">DocumentRoot</span> /var/www/html/wordpress<br><br>    <span class="hljs-section">&lt;Directory /var/www/html/wordpress&gt;</span><br>        <span class="hljs-attribute">Options</span> Indexes FollowSymLinks<br>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span><br>        <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br>    <span class="hljs-section">&lt;/Directory&gt;</span><br><br>    <span class="hljs-attribute">ErrorLog</span> /var/log/httpd/wordpress_error.log<br>    <span class="hljs-attribute">CustomLog</span> /var/log/httpd/wordpress_access.log combined<br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><p>Directory:声明这是一个针对目录 <code>/var/www/html/wordpress</code> 的配置块。</p><p>**<code>Options Indexes FollowSymLinks</code>**：设置该目录的访问行为;</p><p><code>Indexes</code>：如果目录中没有 <code>index.html</code>&#x2F;<code>index.php</code> 文件，<strong>显示目录列表</strong></p><p><code>FollowSymLinks</code>：允许<strong>跟踪符号链接</strong></p><p><strong><code>AllowOverride All</code></strong>:允许该目录下的 <code>.htaccess</code> 文件<strong>覆盖全局配置</strong>。</p><ul><li>WordPress 依赖 <code>.htaccess</code> 实现固定链接（Permalinks）等功能，因此需要设为 <code>All</code>。</li><li>若无需动态配置，可设为 <code>None</code>（更安全，但 WordPress 会无法正常工作）。</li></ul><p><strong><code>Require all granted</code></strong></p><ul><li><strong>作用</strong>：允许<strong>所有用户</strong>访问该目录</li><li>其他常见值<ul><li><code>Require valid-user</code>：需密码认证（配合 Auth 模块使用）。</li><li><code>Require ip 192.168.1.0/24</code>：仅允许特定 IP 段访问。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart httpd<br></code></pre></td></tr></table></figure><h2 id="9-完成-WordPress-安装向导"><a href="#9-完成-WordPress-安装向导" class="headerlink" title="9. 完成 WordPress 安装向导"></a>9. 完成 WordPress 安装向导</h2><ul><li>浏览器访问 <code>http://your_server_ip/</code>。</li><li>按提示填写数据库、站点、管理员账户等信息。</li><li>安装完成后登录后台。</li></ul><h2 id="10-常见故障排查"><a href="#10-常见故障排查" class="headerlink" title="10. 常见故障排查"></a>10. 常见故障排查</h2><ul><li><strong>403 Forbidden</strong>：检查目录权限和 SELinux。</li><li><strong>500 错误</strong>：查看 Apache 错误日志。</li><li><strong>数据库连接失败</strong>：检查 <code>wp-config.php</code> 和数据库状态。</li><li><strong>上传失败</strong>：确认目录写权限，SELinux 设置。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache运维综合配置教程</title>
    <link href="/2025/05/14/Apache%E8%BF%90%E7%BB%B4%E7%BB%BC%E5%90%88%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2025/05/14/Apache%E8%BF%90%E7%BB%B4%E7%BB%BC%E5%90%88%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>#本文由AI辅助完成</p></blockquote><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E4%B8%80%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E7%A1%80%E9%AA%8C%E8%AF%81">安装与基础验证</a></li><li><a href="#%E4%BA%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE">虚拟主机配置</a></li><li><a href="#%E4%B8%89ssltls-%E5%8A%A0%E5%AF%86">SSL&#x2F;TLS 加密</a></li><li><a href="#%E5%9B%9B%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86">常用模块管理</a></li><li><a href="#%E4%BA%94%E6%97%A5%E5%BF%97%E4%B8%8E%E6%97%A5%E5%BF%97%E8%BD%AE%E8%BD%AC">日志与日志轮转</a></li><li><a href="#%E5%85%AD%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA">安全加固</a></li><li><a href="#%E4%B8%83%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98">性能调优</a></li><li><a href="#%E5%85%AB%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">反向代理与负载均衡</a></li><li><a href="#%E4%B9%9D%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">常见问题与故障排查</a></li><li><a href="#%E5%8D%81%E6%89%A9%E5%B1%95%E5%B7%A5%E5%85%B7%E4%B8%8E%E9%9B%86%E6%88%90%E5%BB%BA%E8%AE%AE">扩展工具与集成建议</a></li></ol><hr><h2 id="一、安装与基础验证"><a href="#一、安装与基础验证" class="headerlink" title="一、安装与基础验证"></a>一、安装与基础验证</h2><h3 id="1-使用包管理器安装"><a href="#1-使用包管理器安装" class="headerlink" title="1. 使用包管理器安装"></a>1. 使用包管理器安装</h3><h4 id="CentOS-RHEL-系列"><a href="#CentOS-RHEL-系列" class="headerlink" title="CentOS&#x2F;RHEL 系列"></a>CentOS&#x2F;RHEL 系列</h4><ol><li><p><strong>更新仓库缓存</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum makecache fast<br></code></pre></td></tr></table></figure><ul><li>刷新本地元数据缓存，确保获取最新软件包信息。</li></ul></li><li><p><strong>安装 Apache 包</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y httpd<br></code></pre></td></tr></table></figure><ul><li><code>-y</code> 自动确认，适合脚本化部署。</li></ul></li><li><p><strong>设置开机自启</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> httpd<br></code></pre></td></tr></table></figure><ul><li>将 httpd 服务加入 systemd 启动列表。</li></ul></li><li><p><strong>启动服务并检查状态</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start httpd<br><span class="hljs-built_in">sudo</span> systemctl status httpd<br></code></pre></td></tr></table></figure><ul><li><code>status</code> 命令可返回服务当前状态和最近日志条目。</li></ul></li><li><p><strong>放行防火墙端口（可选）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-service=http<br><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-service=https<br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br></code></pre></td></tr></table></figure><ul><li><code>firewall-cmd</code> 是 firewalld 的命令行工具。</li></ul></li></ol><h4 id="Debian-Ubuntu-系列"><a href="#Debian-Ubuntu-系列" class="headerlink" title="Debian&#x2F;Ubuntu 系列"></a>Debian&#x2F;Ubuntu 系列</h4><ol><li><strong>更新软件源索引</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure></li><li><strong>安装 Apache2</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y apache2<br></code></pre></td></tr></table></figure></li><li><strong>启动服务并设置自启</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start apache2<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> apache2<br></code></pre></td></tr></table></figure></li><li><strong>查看服务状态</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status apache2<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-验证安装"><a href="#2-验证安装" class="headerlink" title="2. 验证安装"></a>2. 验证安装</h3><ul><li><p>在浏览器中访问 <code>http://&lt;服务器IP或域名&gt;/</code>。<br>-输出示例：</p><ul><li>CentOS&#x2F;RHEL: “Apache HTTP Server Test Page”</li><li>Debian&#x2F;Ubuntu: “Apache2 Debian Default Page”</li></ul></li><li><p>如果未显示，检查端口监听状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ss -tuln | grep <span class="hljs-string">&#x27;:80&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="二、虚拟主机配置"><a href="#二、虚拟主机配置" class="headerlink" title="二、虚拟主机配置"></a>二、虚拟主机配置</h2><blockquote><p>使用 VirtualHost 可在一台服务器上托管多个站点，按域名或 IP 区分不同内容。</p></blockquote><h3 id="1-准备文档根目录"><a href="#1-准备文档根目录" class="headerlink" title="1. 准备文档根目录"></a>1. 准备文档根目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /var/www/html/example<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /var/www/html/shop<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/www/html/example /var/www/html/shop<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> -R 755 /var/www/html<br></code></pre></td></tr></table></figure><ul><li><code>chown</code>：更改目录所有者  </li><li><code>chmod 755</code>：用户读写执行，组和其他用户只读执行</li></ul><h3 id="2-创建测试页面"><a href="#2-创建测试页面" class="headerlink" title="2. 创建测试页面"></a>2. 创建测试页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Welcome to Example Site&lt;/h1&gt;&quot;</span> &gt; /var/www/html/example/index.html<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Welcome to Shop Site&lt;/h1&gt;&quot;</span> &gt; /var/www/html/shop/index.html<br></code></pre></td></tr></table></figure><h3 id="3-配置虚拟主机"><a href="#3-配置虚拟主机" class="headerlink" title="3. 配置虚拟主机"></a>3. 配置虚拟主机</h3><p>编辑 <code>vhosts.conf</code>：</p><ul><li>RHEL&#x2F;CentOS: <code>/etc/httpd/conf.d/vhosts.conf</code>  </li><li>Debian&#x2F;Ubuntu: <code>/etc/apache2/sites-available/vhosts.conf</code></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>    <span class="hljs-attribute">ServerName</span> www.example.com<br>    <span class="hljs-attribute">ServerAlias</span> example.com<br>    <span class="hljs-attribute">DocumentRoot</span> /var/www/html/example<br>    <span class="hljs-section">&lt;Directory /var/www/html/example&gt;</span><br>        <span class="hljs-attribute">Options</span> Indexes FollowSymLinks<br>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span><br>        <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br>    <span class="hljs-section">&lt;/Directory&gt;</span><br>    <span class="hljs-attribute">ErrorLog</span> <span class="hljs-variable">$&#123;APACHE_LOG_DIR&#125;</span>/example_error.log<br>    <span class="hljs-attribute">CustomLog</span> <span class="hljs-variable">$&#123;APACHE_LOG_DIR&#125;</span>/example_access.log combined<br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>    <span class="hljs-attribute">ServerName</span> shop.example.com<br>    <span class="hljs-attribute">ServerAlias</span> shop.example.com<br>    <span class="hljs-attribute">DocumentRoot</span> /var/www/html/shop<br>    <span class="hljs-section">&lt;Directory /var/www/html/shop&gt;</span><br>        <span class="hljs-attribute">Options</span> Indexes FollowSymLinks<br>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span><br>        <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br>    <span class="hljs-section">&lt;/Directory&gt;</span><br>    <span class="hljs-attribute">ErrorLog</span> <span class="hljs-variable">$&#123;APACHE_LOG_DIR&#125;</span>/shop_error.log<br>    <span class="hljs-attribute">CustomLog</span> <span class="hljs-variable">$&#123;APACHE_LOG_DIR&#125;</span>/shop_access.log combined<br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>ServerAlias</code>：额外域名  </li><li><code>AllowOverride All</code>：允许目录覆盖 .htaccess</li></ul><h3 id="4-启用并重载"><a href="#4-启用并重载" class="headerlink" title="4. 启用并重载"></a>4. 启用并重载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> a2ensite vhosts.conf        <span class="hljs-comment"># Debian/Ubuntu</span><br><span class="hljs-built_in">sudo</span> systemctl reload httpd<br></code></pre></td></tr></table></figure><h3 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h3><ul><li>修改本地 hosts 文件 <code>/etc/hosts</code>：<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> www.example.com example.com shop.example.com<br></code></pre></td></tr></table></figure></li><li>访问 <code>http://www.example.com</code> 与 <code>http://shop.example.com</code></li></ul><hr><h2 id="三、SSL-TLS-加密"><a href="#三、SSL-TLS-加密" class="headerlink" title="三、SSL&#x2F;TLS 加密"></a>三、SSL&#x2F;TLS 加密</h2><blockquote><p>SSL&#x2F;TLS 提供 HTTPS 加密访问，避免明文传输敏感信息。</p></blockquote><h3 id="1-生成私钥和-CSR"><a href="#1-生成私钥和-CSR" class="headerlink" title="1. 生成私钥和 CSR"></a>1. 生成私钥和 CSR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/httpd/ssl<br><span class="hljs-built_in">cd</span> /etc/httpd/ssl<br><span class="hljs-built_in">sudo</span> openssl genpkey -algorithm RSA -out www.example.com.key -pkeyopt rsa_keygen_bits:2048<br><span class="hljs-built_in">sudo</span> openssl req -new -key www.example.com.key -out www.example.com.csr \<br>  -subj <span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=Example Corp/OU=IT/CN=www.example.com&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>genpkey</code>：推荐的生成密钥方法  </li><li>CSR 包含公钥及组织信息</li></ul><h3 id="2-自签名证书生成"><a href="#2-自签名证书生成" class="headerlink" title="2. 自签名证书生成"></a>2. 自签名证书生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> openssl x509 -req -days 365 -<span class="hljs-keyword">in</span> www.example.com.csr \<br>  -signkey www.example.com.key -out www.example.com.crt<br></code></pre></td></tr></table></figure><ul><li><code>-days 365</code>：证书有效期 1 年</li></ul><h3 id="3-安装并启用-SSL-模块"><a href="#3-安装并启用-SSL-模块" class="headerlink" title="3. 安装并启用 SSL 模块"></a>3. 安装并启用 SSL 模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y mod_ssl       <span class="hljs-comment"># RHEL/CentOS</span><br><span class="hljs-built_in">sudo</span> a2enmod ssl                 <span class="hljs-comment"># Debian/Ubuntu</span><br></code></pre></td></tr></table></figure><h3 id="4-配置-HTTPS-虚拟主机"><a href="#4-配置-HTTPS-虚拟主机" class="headerlink" title="4. 配置 HTTPS 虚拟主机"></a>4. 配置 HTTPS 虚拟主机</h3><p>在 <code>vhosts.conf</code> 末尾添加：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:443</span>&gt;</span><br>    <span class="hljs-attribute">ServerName</span> www.example.com<br>    <span class="hljs-attribute">DocumentRoot</span> /var/www/html/example<br>    <span class="hljs-attribute">SSLEngine</span> <span class="hljs-literal">on</span><br>    <span class="hljs-attribute">SSLCertificateFile</span> /etc/httpd/ssl/www.example.com.crt<br>    <span class="hljs-attribute">SSLCertificateKeyFile</span> /etc/httpd/ssl/www.example.com.key<br>    <span class="hljs-section">&lt;Directory /var/www/html/example&gt;</span><br>        <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br>    <span class="hljs-section">&lt;/Directory&gt;</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-防火墙及重启"><a href="#5-防火墙及重启" class="headerlink" title="5. 防火墙及重启"></a>5. 防火墙及重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --add-port=443/tcp<br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br><span class="hljs-built_in">sudo</span> systemctl restart httpd<br></code></pre></td></tr></table></figure><hr><h2 id="四、常用模块管理"><a href="#四、常用模块管理" class="headerlink" title="四、常用模块管理"></a>四、常用模块管理</h2><h3 id="URL-重写-mod-rewrite"><a href="#URL-重写-mod-rewrite" class="headerlink" title="URL 重写 (mod_rewrite)"></a>URL 重写 (mod_rewrite)</h3><ul><li>启用模块：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> a2enmod rewrite<br></code></pre></td></tr></table></figure></li><li>核心指令解释：<ul><li><code>RewriteEngine On</code>：打开重写引擎</li><li><code>RewriteRule Pattern Substitution [Flags]</code></li></ul></li></ul><p>.htaccess 示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">On</span><br><span class="hljs-attribute">RewriteRule</span> ^old-page\.html$ /new-page.html<span class="hljs-meta"> [R=301,L]</span><br></code></pre></td></tr></table></figure><h3 id="路径别名-mod-alias"><a href="#路径别名-mod-alias" class="headerlink" title="路径别名 (mod_alias)"></a>路径别名 (mod_alias)</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Alias</span> /docs /var/www/shared/docs<br><span class="hljs-section">&lt;Directory /var/www/shared/docs&gt;</span><br>    <span class="hljs-attribute">Options</span> Indexes<br>    <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br><span class="hljs-section">&lt;/Directory&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>Alias</code>：URL 到文件路径映射</li></ul><h3 id="服务器状态监控-mod-status"><a href="#服务器状态监控-mod-status" class="headerlink" title="服务器状态监控 (mod_status)"></a>服务器状态监控 (mod_status)</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Location /server-status&gt;</span><br>    <span class="hljs-attribute">SetHandler</span> server-status<br>    <span class="hljs-attribute">Require</span> local<br><span class="hljs-section">&lt;/Location&gt;</span><br><span class="hljs-attribute">ExtendedStatus</span> <span class="hljs-literal">On</span><br></code></pre></td></tr></table></figure><ul><li><code>ExtendedStatus</code>：收集更详细指标</li></ul><hr><h2 id="五、日志与日志轮转"><a href="#五、日志与日志轮转" class="headerlink" title="五、日志与日志轮转"></a>五、日志与日志轮转</h2><h3 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LogFormat</span> <span class="hljs-string">&quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b %D&quot;</span> detailed<br><span class="hljs-attribute">CustomLog</span> /var/log/httpd/access_detailed.log detailed<br></code></pre></td></tr></table></figure><ul><li><code>%&gt;s</code>：实际返回给客户端的状态码</li><li><code>%b</code>：响应大小（不包含头）</li></ul><h3 id="logrotate-配置"><a href="#logrotate-配置" class="headerlink" title="logrotate 配置"></a>logrotate 配置</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">/var/log/httpd/access_detailed.log &#123;<br>    daily<br>    rotate 14<br>    compress<br>    delaycompress<br>    missingok<br>    notifempty<br>    create 640 root adm<br>    postrotate<br>        systemctl reload httpd<br>    endscript<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="六、安全加固"><a href="#六、安全加固" class="headerlink" title="六、安全加固"></a>六、安全加固</h2><h3 id="禁止目录列表"><a href="#禁止目录列表" class="headerlink" title="禁止目录列表"></a>禁止目录列表</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Directory /var/www/html&gt;</span><br>    <span class="hljs-attribute">Options</span> -Indexes<br><span class="hljs-section">&lt;/Directory&gt;</span><br></code></pre></td></tr></table></figure><h3 id="限制-IP-访问"><a href="#限制-IP-访问" class="headerlink" title="限制 IP 访问"></a>限制 IP 访问</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Directory /var/www/html/private&gt;</span><br>    <span class="hljs-attribute">Require</span> ip <span class="hljs-number">192.168.0.0</span>/<span class="hljs-number">24</span><br>    <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> denied<br><span class="hljs-section">&lt;/Directory&gt;</span><br></code></pre></td></tr></table></figure><h3 id="防-DDoS-攻击-mod-evasive"><a href="#防-DDoS-攻击-mod-evasive" class="headerlink" title="防 DDoS 攻击 (mod_evasive)"></a>防 DDoS 攻击 (mod_evasive)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y mod_evasive   <span class="hljs-comment"># RHEL/CentOS</span><br><span class="hljs-built_in">sudo</span> apt install -y libapache2-mod-evasive  <span class="hljs-comment"># Debian/Ubuntu</span><br>&lt;IfModule mod_evasive20.c&gt;<br>    DOSHashTableSize    3097<br>    DOSPageCount        2<br>    DOSSiteCount        50<br>    DOSBlockingPeriod   10<br>    DOSLogDir           <span class="hljs-string">&quot;/var/log/mod_evasive&quot;</span><br>&lt;/IfModule&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="七、性能调优"><a href="#七、性能调优" class="headerlink" title="七、性能调优"></a>七、性能调优</h2><h3 id="Worker-MPM-启用"><a href="#Worker-MPM-启用" class="headerlink" title="Worker MPM 启用"></a>Worker MPM 启用</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 注释 prefork</span><br><span class="hljs-comment">#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</span><br><span class="hljs-attribute">LoadModule</span> mpm_worker_module modules/mod_mpm_worker.so<br></code></pre></td></tr></table></figure><h3 id="进程和线程配置"><a href="#进程和线程配置" class="headerlink" title="进程和线程配置"></a>进程和线程配置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;IfModule mpm_worker_module&gt;</span><br>    <span class="hljs-attribute">StartServers</span>          <span class="hljs-number">3</span><br>    <span class="hljs-attribute">ThreadsPerChild</span>      <span class="hljs-number">25</span><br>    <span class="hljs-attribute">MinSpareThreads</span>      <span class="hljs-number">75</span><br>    <span class="hljs-attribute">MaxSpareThreads</span>     <span class="hljs-number">250</span><br>    <span class="hljs-attribute">MaxRequestWorkers</span>    <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">MaxConnectionsPerChild</span>  <span class="hljs-number">10000</span><br><span class="hljs-section">&lt;/IfModule&gt;</span><br></code></pre></td></tr></table></figure><h3 id="压缩与缓存"><a href="#压缩与缓存" class="headerlink" title="压缩与缓存"></a>压缩与缓存</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;IfModule mod_deflate.c&gt;</span><br>    <span class="hljs-attribute">AddOutputFilterByType</span> DEFLATE text/html text/css application/javascript image/svg+xml<br><span class="hljs-section">&lt;/IfModule&gt;</span><br><span class="hljs-section">&lt;IfModule mod_expires.c&gt;</span><br>    <span class="hljs-attribute">ExpiresActive</span> <span class="hljs-literal">On</span><br>    <span class="hljs-attribute">ExpiresByType</span> text/css <span class="hljs-string">&quot;access plus 7 days&quot;</span><br>    <span class="hljs-attribute">ExpiresByType</span> application/javascript <span class="hljs-string">&quot;access plus 7 days&quot;</span><br>    <span class="hljs-attribute">ExpiresByType</span> image/* <span class="hljs-string">&quot;access plus 30 days&quot;</span><br><span class="hljs-section">&lt;/IfModule&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="八、反向代理与负载均衡"><a href="#八、反向代理与负载均衡" class="headerlink" title="八、反向代理与负载均衡"></a>八、反向代理与负载均衡</h2><h3 id="启用模块"><a href="#启用模块" class="headerlink" title="启用模块"></a>启用模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> a2enmod proxy proxy_http proxy_balancer lbmethod_byrequests<br></code></pre></td></tr></table></figure><h3 id="负载均衡示例"><a href="#负载均衡示例" class="headerlink" title="负载均衡示例"></a>负载均衡示例</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Proxy <span class="hljs-string">&quot;balancer://backend_cluster&quot;</span>&gt;</span><br>    <span class="hljs-attribute">BalancerMember</span> http://<span class="hljs-number">10.0.0.1:8080</span> loadfactor=<span class="hljs-number">5</span><br>    <span class="hljs-attribute">BalancerMember</span> http://<span class="hljs-number">10.0.0.2:8080</span><br>    <span class="hljs-attribute">ProxySet</span> lbmethod=byrequests stickysession=JSESSIONID<br><span class="hljs-section">&lt;/Proxy&gt;</span><br><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>    <span class="hljs-attribute">ServerName</span> api.example.com<br>    <span class="hljs-attribute">ProxyPass</span> <span class="hljs-string">&quot;/api/&quot;</span> <span class="hljs-string">&quot;balancer://backend_cluster/&quot;</span><br>    <span class="hljs-attribute">ProxyPassReverse</span> <span class="hljs-string">&quot;/api/&quot;</span> <span class="hljs-string">&quot;balancer://backend_cluster/&quot;</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="九、常见问题与故障排查"><a href="#九、常见问题与故障排查" class="headerlink" title="九、常见问题与故障排查"></a>九、常见问题与故障排查</h2><h3 id="服务启动失败"><a href="#服务启动失败" class="headerlink" title="服务启动失败"></a>服务启动失败</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status httpd<br><span class="hljs-built_in">sudo</span> journalctl -xe<br>apachectl configtest<br></code></pre></td></tr></table></figure><ul><li>检查配置语法、端口占用、权限问题。</li></ul><h3 id="虚拟主机无效"><a href="#虚拟主机无效" class="headerlink" title="虚拟主机无效"></a>虚拟主机无效</h3><ul><li>确认 <code>ServerName</code> 与 <code>ServerAlias</code></li><li>执行 <code>apachectl -S</code> 查看虚拟主机加载情况</li></ul><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><ul><li>确保 <code>Require all granted</code></li><li>SELinux 上下文：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chcon</span> -R -t httpd_sys_content_t /var/www/html<br></code></pre></td></tr></table></figure></li></ul><h3 id="SSL-证书错误"><a href="#SSL-证书错误" class="headerlink" title="SSL 证书错误"></a>SSL 证书错误</h3><ul><li>验证证书有效期与路径：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -<span class="hljs-keyword">in</span> www.example.com.crt -noout -dates -subject<br></code></pre></td></tr></table></figure></li></ul><h3 id="重写规则不生效"><a href="#重写规则不生效" class="headerlink" title="重写规则不生效"></a>重写规则不生效</h3><ul><li>查看 <code>.htaccess</code> 权限</li><li>查看错误日志 <code>/var/log/httpd/error_log</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>-Linxu -Apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux搭建和配置 NFS（Network File System）(CentOS7)</title>
    <link href="/2025/05/09/Linux%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE-NFS%EF%BC%88Network-File-System%EF%BC%89-CentOS7/"/>
    <url>/2025/05/09/Linux%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE-NFS%EF%BC%88Network-File-System%EF%BC%89-CentOS7/</url>
    
    <content type="html"><![CDATA[<p>NFS简介:<br>    NFS（Network File System 网络文件服务），是一种基于 TCP&#x2F;IP 传输的网络文件系统协议，最初由 Sun 公司开发。<br>NFS 服务的实现依赖于 RPC（Remote Process Call，远端过程调用）机制，通过使用 NFS 协议，客户机可以像访问本地目录一样访问远程服务器中的共享资源。（远端过程调用：自己没有这种功能，调用别人的功能） NFS 也是 NAS 存储 设备必然支持的一种协议，以完成远程到本地的映射过程。(NAS—-Network Attached Storage：网络附属存储NFS是NAS的一种)</p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置:"></a>服务端配置:</h2><h3 id="1-安装-NFS-服务"><a href="#1-安装-NFS-服务" class="headerlink" title="1. 安装 NFS 服务"></a>1. 安装 NFS 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y nfs-utils<br></code></pre></td></tr></table></figure><h3 id="2-创建共享目录"><a href="#2-创建共享目录" class="headerlink" title="2.创建共享目录"></a>2.创建共享目录</h3><p>确保服务器（NFS Server）与客户端（NFS Client）能够相互 ping 通。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping &lt;对方ip&gt;<br></code></pre></td></tr></table></figure><p>若ping不通可执行以下操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">setenforce 0 <span class="hljs-comment">#关闭防火墙安全模块</span><br>systemctl stop firewalld <span class="hljs-comment">#停止防火墙服务</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld <span class="hljs-comment">#禁用开机启动防火墙</span><br><span class="hljs-built_in">sudo</span> setenforce 0  <span class="hljs-comment">#临时关闭 SELinux</span><br></code></pre></td></tr></table></figure><h3 id="3-创建共享目录"><a href="#3-创建共享目录" class="headerlink" title="3. 创建共享目录"></a>3. 创建共享目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /srv/nfs/shared<br><span class="hljs-built_in">chmod</span> 777 /srv/nfs/shared<br></code></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：</p><ul><li><code>mkdir -p</code>：创建目录及其上级目录。</li><li><code>chmod 777</code>：设置目录为所有用户可读写执行（测试环境使用，生产可根据需要收紧权限）。</li></ul></blockquote><h3 id="4-编辑导出配置"><a href="#4-编辑导出配置" class="headerlink" title="4. 编辑导出配置"></a>4. 编辑导出配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/exports &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">/srv/nfs/shared   192.168.1.0/24(rw,no_root_squash,sync)</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：</p><ul><li><code>/srv/nfs/shared</code>：本地要共享的目录。</li><li><code>192.168.1.0/24</code>：允许访问的客户端网段（可改为单 IP，如 <code>192.168.1.100</code>）。</li><li><code>rw</code>：允许读写。</li><li><code>no_root_squash</code>：客户端以 root 身份访问时，不映射为匿名用户（慎用）。</li><li><code>sync</code>：写操作以同步方式进行，保证数据完整性。</li></ul></blockquote><h3 id="5-启动并设置服务开机自启"><a href="#5-启动并设置服务开机自启" class="headerlink" title="5. 启动并设置服务开机自启"></a>5. 启动并设置服务开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now nfs-server<br>systemctl <span class="hljs-built_in">enable</span> --now rpcbind<br></code></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：</p><ul><li><code>nfs-server</code>：NFS 服务主体。</li><li><code>rpcbind</code>：RPC 服务框架，对 NFS 工作必需。</li><li><code>--now</code>：立即启动并开机自启。</li></ul></blockquote><h3 id="6-刷新导出表并查看"><a href="#6-刷新导出表并查看" class="headerlink" title="6. 刷新导出表并查看"></a>6. 刷新导出表并查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">exportfs -r<br>exportfs -v<br></code></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：</p><ul><li><code>exportfs -r</code>：重新导出 <code>/etc/exports</code> 中的所有条目。</li><li><code>exportfs -v</code>：查看当前导出的共享及其选项。</li></ul></blockquote><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置:"></a>客户端配置:</h2><h3 id="1-安装-NFS-客户端工具"><a href="#1-安装-NFS-客户端工具" class="headerlink" title="1. 安装 NFS 客户端工具"></a>1. 安装 NFS 客户端工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y nfs-utils<br></code></pre></td></tr></table></figure><h3 id="2-创建挂载点"><a href="#2-创建挂载点" class="headerlink" title="2. 创建挂载点"></a>2. 创建挂载点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mnt/nfs/shared<br></code></pre></td></tr></table></figure><h3 id="3-手动挂载（测试）"><a href="#3-手动挂载（测试）" class="headerlink" title="3. 手动挂载（测试）"></a>3. 手动挂载（测试）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t nfs 192.168.1.10:/srv/nfs/shared /mnt/nfs/shared<br></code></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：</p><ul><li><code>-t nfs</code>：指定文件系统类型为 NFS。</li><li><code>192.168.1.10:/srv/nfs/shared</code>：服务端 IP 与导出目录。</li><li><code>/mnt/nfs/shared</code>：本地挂载点。</li></ul></blockquote><p><strong>验证挂载：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h | grep nfs<br>showmount -e 192.168.1.10<br></code></pre></td></tr></table></figure><h3 id="4-持久化挂载（开机自动挂载）"><a href="#4-持久化挂载（开机自动挂载）" class="headerlink" title="4. 持久化挂载（开机自动挂载）"></a>4. 持久化挂载（开机自动挂载）</h3><p>编辑 <code>/etc/fstab</code>，添加一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.1.10:/srv/nfs/shared   /mnt/nfs/shared   nfs   defaults,_netdev  0 0<br></code></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：</p><ul><li><code>defaults</code>：使用默认挂载选项（rw, suid, dev, exec, auto, nouser, async）。</li><li><code>_netdev</code>：表示网络文件系统，在网络起后再挂载，防止开机时网络未就绪导致挂载失败。</li></ul></blockquote><p>然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -a<br></code></pre></td></tr></table></figure><p>检查无误即可。</p><hr><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><ol><li><p><strong>读写测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello NFS&quot;</span> &gt; /mnt/nfs/shared/test.txt<br><span class="hljs-built_in">cat</span> /mnt/nfs/shared/test.txt<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>-Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建磁盘阵列（RAID）</title>
    <link href="/2025/04/29/%E6%90%AD%E5%BB%BA%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97%EF%BC%88RAID%EF%BC%89/"/>
    <url>/2025/04/29/%E6%90%AD%E5%BB%BA%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97%EF%BC%88RAID%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="🧩-Linux-RAID-配置教程（CentOS-7）"><a href="#🧩-Linux-RAID-配置教程（CentOS-7）" class="headerlink" title="🧩 Linux RAID 配置教程（CentOS 7）"></a>🧩 Linux RAID 配置教程（CentOS 7）</h1><blockquote><p>本文涵盖 RAID 0、RAID 1、RAID 5、RAID 10 的实现步骤、故障盘处理技巧。</p></blockquote><h2 id="🔧-准备工作"><a href="#🔧-准备工作" class="headerlink" title="🔧 准备工作"></a>🔧 准备工作</h2><ol><li><p>安装 RAID 工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y mdadm<br></code></pre></td></tr></table></figure></li><li><p>准备至少 2 块以上未分区的新硬盘（如 <code>/dev/sdb</code>, <code>/dev/sdc</code> …）。</p></li></ol><h2 id="📀-RAID-0：条带化（无冗余）"><a href="#📀-RAID-0：条带化（无冗余）" class="headerlink" title="📀 RAID 0：条带化（无冗余）"></a>📀 RAID 0：条带化（无冗余）</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>至少 2 块盘</li><li>性能好</li><li>不具备容错能力（任意盘损坏全部数据丢失）</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/sdb /dev/sdc<br>mkfs.ext4 /dev/md0<br><span class="hljs-built_in">mkdir</span> /mnt/raid0<br>mount /dev/md0 /mnt/raid0<br>mdadm --detail --scan &gt;&gt; /etc/mdadm.conf<br>blkid /dev/md0  <span class="hljs-comment"># 加入 /etc/fstab</span><br></code></pre></td></tr></table></figure><h2 id="🛡️-RAID-1：镜像"><a href="#🛡️-RAID-1：镜像" class="headerlink" title="🛡️ RAID 1：镜像"></a>🛡️ RAID 1：镜像</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>至少 2 块盘</li><li>数据完全复制</li><li>可容忍 1 块盘故障</li><li>写性能较差，但读性能优秀</li></ul><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sdb /dev/sdc<br>mkfs.ext4 /dev/md0<br><span class="hljs-built_in">mkdir</span> /mnt/raid1<br>mount /dev/md0 /mnt/raid1<br>mdadm --detail --scan &gt;&gt; /etc/mdadm.conf<br>blkid /dev/md0<br></code></pre></td></tr></table></figure><h2 id="📊-RAID-5：带奇偶校验的条带化"><a href="#📊-RAID-5：带奇偶校验的条带化" class="headerlink" title="📊 RAID 5：带奇偶校验的条带化"></a>📊 RAID 5：带奇偶校验的条带化</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>至少 3 块盘</li><li>奇偶校验保证容错</li><li>可容忍 1 块盘故障</li></ul><h3 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/sdb /dev/sdc /dev/sdd<br>mkfs.ext4 /dev/md0<br><span class="hljs-built_in">mkdir</span> /mnt/raid5<br>mount /dev/md0 /mnt/raid5<br>mdadm --detail --scan &gt;&gt; /etc/mdadm.conf<br>blkid /dev/md0<br></code></pre></td></tr></table></figure><h3 id="故障模拟与恢复"><a href="#故障模拟与恢复" class="headerlink" title="故障模拟与恢复"></a>故障模拟与恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --fail /dev/md0 /dev/sdc<br>mdadm --remove /dev/md0 /dev/sdc<br>mdadm --add /dev/md0 /dev/sde<br></code></pre></td></tr></table></figure><h2 id="⚙️-RAID-10：镜像-条带"><a href="#⚙️-RAID-10：镜像-条带" class="headerlink" title="⚙️ RAID 10：镜像 + 条带"></a>⚙️ RAID 10：镜像 + 条带</h2><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>至少 4 块盘</li><li>把盘两两组成镜像，再条带化</li><li>高性能 + 高冗余，读写都快</li><li>可容忍每组损失一块盘</li></ul><h3 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --create /dev/md0 --level=10 --raid-devices=4 /dev/sdb /dev/sdc /dev/sdd /dev/sde<br>mkfs.ext4 /dev/md0<br><span class="hljs-built_in">mkdir</span> /mnt/raid10<br>mount /dev/md0 /mnt/raid10<br>mdadm --detail --scan &gt;&gt; /etc/mdadm.conf<br>blkid /dev/md0<br></code></pre></td></tr></table></figure><h2 id="⚠️-故障盘处理通用命令"><a href="#⚠️-故障盘处理通用命令" class="headerlink" title="⚠️ 故障盘处理通用命令"></a>⚠️ 故障盘处理通用命令</h2><ul><li><p>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/mdstat<br>mdadm --detail /dev/md0<br></code></pre></td></tr></table></figure></li><li><p>标记某盘为故障：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --fail /dev/md0 /dev/sdX<br></code></pre></td></tr></table></figure></li><li><p>移除盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --remove /dev/md0 /dev/sdX<br></code></pre></td></tr></table></figure></li><li><p>添加新盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --add /dev/md0 /dev/sdY<br></code></pre></td></tr></table></figure></li></ul><h2 id="📌-RAID-对比表"><a href="#📌-RAID-对比表" class="headerlink" title="📌 RAID 对比表"></a>📌 RAID 对比表</h2><table><thead><tr><th>RAID级别</th><th>最少盘数</th><th>容错能力</th><th>读性能</th><th>写性能</th><th>容量利用率</th><th>应用场景</th></tr></thead><tbody><tr><td>RAID 0</td><td>2</td><td>无</td><td>高</td><td>高</td><td>100%</td><td>高速缓存、临时数据</td></tr><tr><td>RAID 1</td><td>2</td><td>可容忍1块</td><td>高</td><td>低</td><td>50%</td><td>系统盘、重要数据</td></tr><tr><td>RAID 5</td><td>3</td><td>可容忍1块</td><td>高</td><td>中</td><td>(N-1)&#x2F;N</td><td>一般存储服务器</td></tr><tr><td>RAID 10</td><td>4</td><td>每组容忍1块</td><td>高</td><td>高</td><td>50%</td><td>数据库、IO密集型应用</td></tr></tbody></table><h2 id="✅-RAID-设备开机自动挂载总结"><a href="#✅-RAID-设备开机自动挂载总结" class="headerlink" title="✅ RAID 设备开机自动挂载总结"></a>✅ RAID 设备开机自动挂载总结</h2><ol><li><p>获取 UUID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">blkid /dev/md0<br></code></pre></td></tr></table></figure></li><li><p>编辑 <code>/etc/fstab</code>：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">UUID</span><span class="hljs-operator">=</span>xxxx-xxxx /mnt/raidX ext4 defaults <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>保存 RAID 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --detail --scan &gt;&gt; /etc/mdadm.conf<br></code></pre></td></tr></table></figure></li></ol><h2 id="📎-参考命令速查"><a href="#📎-参考命令速查" class="headerlink" title="📎 参考命令速查"></a>📎 参考命令速查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mdadm --create ...<br>mdadm --detail /dev/md0<br>mdadm --fail ...<br>mdadm --remove ...<br>mdadm --add ...<br>mkfs.ext4 /dev/md0<br>mount /dev/md0 /mnt/xxx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>RAID</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Cloud入门学习</title>
    <link href="/2025/02/21/Spring-Cloud%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/02/21/Spring-Cloud%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器配置小记</title>
    <link href="/2024/12/07/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/"/>
    <url>/2024/12/07/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>由于一年前购买的腾讯云服务器过期,考虑购入一台阿里云服务器,使用阿里云学生优惠:<a href="https://university.aliyun.com/">阿里云高校计划_云工开物_助力高校科研与教育加速-阿里云</a>后价格高达0元.</p><p><img src="/images/a1.png"></p><p>虽然之前的腾讯云服务器由于内存不足更新引入软件源失败,但囊中羞涩配置依旧是2核2G.</p><p>首先放通一下安全组,安装docker,1Panel,,宝塔面板个人使用太麻烦了.一开始就踩了个大坑,服务器无法访问外网,一看公网ip都没有,百思不得其解,后来发现是创建实例的时候必须勾选宽带.</p><p><img src="/images/a2.png"></p><p>配置好后先部署第一个项目,<a href="https://github.com/code-brown/YesPlayMusic">code-brown&#x2F;YesPlayMusic: 高颜值的第三方网易云播放器</a>,配置安装node.js,发现需要14 || 16 nodejs版本,安装nvm,切换到16版本后安装依赖构建.</p>]]></content>
    
    
    
    <tags>
      
      <tag>-服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus使用入门</title>
    <link href="/2024/12/04/MyBatis-Plus%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <url>/2024/12/04/MyBatis-Plus%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>MyBatis-Plus官网:<a href="https://baomidou.com/">MyBatis-Plus 🚀 为简化开发而生</a></p><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a> 是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="使用MBP后端完成crud操作"><a href="#使用MBP后端完成crud操作" class="headerlink" title="使用MBP后端完成crud操作:"></a>使用MBP后端完成crud操作:</h3><p>1.引入MyBatis-Plus依赖</p><p>2.创建数据库,配置数据源</p><p>3.创建user实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> gender;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.创建控制器</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@CrossOrigin</span>(origins = <span class="hljs-string">&quot;http://localhost:XXXX&quot;</span>)<br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/users&quot;</span>)<br><span class="hljs-variable">@RestController</span><br>public class Controller &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-variable">@GetMapping</span><br>    public List&lt;User&gt; <span class="hljs-built_in">findAllUser</span>()&#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.list</span>();<br>    &#125;<br><br>    @<span class="hljs-selector-tag">PostMapping</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">addUser</span>(<span class="hljs-variable">@RequestBody</span> User user)&#123;<br>        <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.save</span>(user);<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">user</span>; <span class="hljs-comment">// 返回保存的用户对象，包含生成的ID</span><br>    &#125;<br><br>    @<span class="hljs-selector-tag">PutMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">boolean</span> <span class="hljs-selector-tag">updateUser</span>(<span class="hljs-variable">@RequestBody</span> User user, <span class="hljs-variable">@PathVariable</span> int id)&#123;<br>        <span class="hljs-selector-tag">user</span><span class="hljs-selector-class">.setId</span>(id); <span class="hljs-comment">// 确保更新的用户ID正确</span><br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.updateById</span>(user);<br>    &#125;<br><br>    @<span class="hljs-selector-tag">DeleteMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">boolean</span> <span class="hljs-selector-tag">deleteUser</span>(<span class="hljs-variable">@PathVariable</span> int id) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">userService</span><span class="hljs-selector-class">.removeById</span>(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.完成对应前端页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h1&gt;用户列表&lt;/h1&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;user in users&quot; :key=&quot;user.id&quot; @click=&quot;selectUser(user)&quot; class=&quot;user-item&quot;&gt;<br>        &#123;&#123; user.name &#125;&#125;<br>      &lt;/li&gt;<br>      &lt;button @click=&quot;editSelectedUser&quot; :disabled=&quot;!selectedUser&quot; class=&quot;action-button&quot;&gt;编辑用户&lt;/button&gt;<br>      &lt;button @click=&quot;deleteUser(selectedUser)&quot; :disabled=&quot;!selectedUser&quot; class=&quot;action-button&quot;&gt;删除用户&lt;/button&gt;<br>    &lt;/ul&gt;<br><br>    &lt;h2&gt;添加用户&lt;/h2&gt;<br>    &lt;form @submit.prevent=&quot;addUser&quot; class=&quot;user-form&quot;&gt;<br>      &lt;input type=&quot;text&quot; v-model=&quot;newUser.name&quot; placeholder=&quot;请输入姓名&quot; class=&quot;user-input&quot; required&gt;<br>      &lt;input type=&quot;date&quot; v-model=&quot;newUser.birthday&quot; placeholder=&quot;请输入出生日期&quot; class=&quot;user-input&quot; required&gt;<br>      &lt;input type=&quot;text&quot; v-model=&quot;newUser.address&quot; placeholder=&quot;请输入地址&quot; class=&quot;user-input&quot; required&gt;<br>      &lt;select v-model=&quot;newUser.gender&quot; class=&quot;user-input&quot; required&gt;<br>        &lt;option value=&quot;&quot; disabled&gt;请选择性别&lt;/option&gt;<br>        &lt;option value=&quot;1&quot;&gt;男&lt;/option&gt;<br>        &lt;option value=&quot;2&quot;&gt;女&lt;/option&gt;<br>      &lt;/select&gt;<br>      &lt;button type=&quot;submit&quot; class=&quot;submit-button&quot;&gt;添加用户&lt;/button&gt;<br>    &lt;/form&gt;<br><br>    &lt;h2 v-if=&quot;editingUser&quot;&gt;编辑用户&lt;/h2&gt;<br>    &lt;form v-if=&quot;editingUser&quot; @submit.prevent=&quot;updateUser&quot; class=&quot;user-form&quot;&gt;<br>      &lt;input v-model=&quot;editingUser.name&quot; placeholder=&quot;请输入姓名&quot; class=&quot;user-input&quot; required&gt;<br>      &lt;input v-model=&quot;editingUser.birthday&quot; placeholder=&quot;请输入出生日期&quot; class=&quot;user-input&quot; required&gt;<br>      &lt;input v-model=&quot;editingUser.address&quot; placeholder=&quot;请输入地址&quot; class=&quot;user-input&quot; required&gt;<br>      &lt;select v-model=&quot;editingUser.gender&quot; class=&quot;user-input&quot; required&gt;<br>        &lt;option value=&quot;1&quot;&gt;男&lt;/option&gt;<br>        &lt;option value=&quot;2&quot;&gt;女&lt;/option&gt;<br>      &lt;/select&gt;<br>      &lt;button type=&quot;submit&quot; class=&quot;submit-button&quot;&gt;保存&lt;/button&gt;<br>      &lt;button @click=&quot;cancelEdit&quot; class=&quot;cancel-button&quot;&gt;取消&lt;/button&gt;<br>    &lt;/form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      users: [],<br>      newUser: &#123; name: &#x27;&#x27;, birthday: &#x27;&#x27;, address: &#x27;&#x27;, gender: &#x27;&#x27; &#125;,<br>      editingUser: null,<br>      selectedUser: null,<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    this.fetchUsers();<br>  &#125;,<br>  methods: &#123;<br>    async fetchUsers() &#123;<br>      try &#123;<br>        const response = await axios.get(&#x27;http://localhost:8080/users&#x27;);<br>        this.users = response.data;<br>      &#125; catch (error) &#123;<br>        console.log(&quot;获取用户信息错误&quot;, error);<br>      &#125;<br>    &#125;,<br>    async addUser() &#123;<br>      if (!this.newUser.name || !this.newUser.birthday || !this.newUser.address || !this.newUser.gender) &#123;<br>        alert(&#x27;所有字段均为必填项&#x27;);<br>        return;<br>      &#125;<br>      try &#123;<br>        const response = await axios.post(&#x27;http://localhost:8080/users&#x27;, this.newUser);<br>        if (response.data) &#123;<br>          this.users.push(response.data);<br>          this.newUser = &#123; name: &#x27;&#x27;, birthday: &#x27;&#x27;, address: &#x27;&#x27;, gender: &#x27;&#x27; &#125;;<br>          await this.fetchUsers();  // 添加用户后刷新列表<br>        &#125;<br>      &#125; catch (error) &#123;<br>        console.log(&quot;添加用户错误&quot;, error);<br>      &#125;<br>    &#125;,<br>    async updateUser() &#123;<br>      try &#123;<br>        const response = await axios.put(`http://localhost:8080/users/$&#123;this.editingUser.id&#125;`, this.editingUser);<br>        if (response.data) &#123;<br>          await this.fetchUsers();  // 更新用户后刷新列表<br>          this.editingUser = null;<br>        &#125;<br>      &#125; catch (error) &#123;<br>        console.log(&quot;更新用户错误&quot;, error);<br>      &#125;<br>    &#125;,<br>    async deleteUser(user) &#123;<br>      if (!confirm(`确定要删除用户 $&#123;user.name&#125; 吗？`)) return;<br>      try &#123;<br>        const response = await axios.delete(`http://localhost:8080/users/$&#123;user.id&#125;`);<br>        if (response.status === 200) &#123;<br>          this.users = this.users.filter(u =&gt; u.id !== user.id);<br>        &#125;<br>      &#125; catch (error) &#123;<br>        console.log(&quot;删除用户错误&quot;, error);<br>      &#125;<br>    &#125;,<br>    selectUser(user) &#123;<br>      this.selectedUser = user;<br>    &#125;,<br>    editSelectedUser() &#123;<br>      if (this.selectedUser) &#123;<br>        this.editingUser = &#123; ...this.selectedUser &#125;;<br>      &#125;<br>    &#125;,<br>    cancelEdit() &#123;<br>      this.editingUser = null;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.app &#123;<br>  font-family: Arial, sans-serif;<br>  margin: 20px;<br>  padding: 20px;<br>  border: 1px solid #ccc;<br>  border-radius: 8px;<br>  background-color: #f9f9f9;<br>&#125;<br><br>h1, h2 &#123;<br>  color: #333;<br>&#125;<br><br>ul &#123;<br>  list-style-type: none;<br>  padding: 0;<br>  margin-bottom: 20px;<br>&#125;<br><br>.user-item &#123;<br>  padding: 10px;<br>  margin: 5px 0;<br>  border: 1px solid #ddd;<br>  border-radius: 4px;<br>  cursor: pointer;<br>  transition: background-color 0.3s;<br>&#125;<br><br>.user-item:hover &#123;<br>  background-color: #e0e0e0;<br>&#125;<br><br>.action-button &#123;<br>  padding: 10px 20px;<br>  margin: 5px;<br>  border: none;<br>  border-radius: 4px;<br>  color: white;<br>  background-color: #007bff;<br>  cursor: pointer;<br>  transition: background-color 0.3s;<br>&#125;<br><br>.action-button:disabled &#123;<br>  background-color: #ccc;<br>  cursor: not-allowed;<br>&#125;<br><br>.action-button:hover:enabled &#123;<br>  background-color: #0056b3;<br>&#125;<br><br>.user-form &#123;<br>  margin-bottom: 20px;<br>&#125;<br><br>.user-input &#123;<br>  display: block;<br>  width: 100%;<br>  padding: 10px;<br>  margin-bottom: 10px;<br>  border: 1px solid #ddd;<br>  border-radius: 4px;<br>  box-sizing: border-box;<br>&#125;<br><br>.submit-button &#123;<br>  padding: 10px 20px;<br>  border: none;<br>  border-radius: 4px;<br>  color: white;<br>  background-color: #28a745;<br>  cursor: pointer;<br>  transition: background-color 0.3s;<br>&#125;<br><br>.submit-button:hover &#123;<br>  background-color: #218838;<br>&#125;<br><br>.cancel-button &#123;<br>  padding: 10px 20px;<br>  border: none;<br>  border-radius: 4px;<br>  color: white;<br>  background-color: #dc3545;<br>  cursor: pointer;<br>  transition: background-color 0.3s;<br>&#125;<br><br>.cancel-button:hover &#123;<br>  background-color: #c82333;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-MyBatis -Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mall项目学习记录</title>
    <link href="/2024/12/03/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/12/03/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-Generator使用配置</title>
    <link href="/2024/12/03/Mybatis-Generator%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/12/03/Mybatis-Generator%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>MyBatis Generator官网:<a href="https://mybatis.org/generator/">MyBatis Generator Core – Introduction to MyBatis Generator</a></p><p>MyBatis Generator （MBG） 是 MyBatis 官方的代码生成器。它能够根据数据库表，自动生成 java 实体类、dao 层接口（mapper 接口）及mapper.xml文件。这大大减少了我们建立实体类、dao 接口及 mapper 映射文件的繁琐任务，可以节省很多时间，专注于业务层代码的开发</p><p>配置步骤;</p><p>1.引入依赖和插件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br></code></pre></td></tr></table></figure><p>:这个配置项表示允许覆盖已存在的文件或资源。当设置为 true 时，如果目标位置已经存在同名的文件或资源，将会被新文件或资源覆盖。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;<span class="hljs-built_in">verbose</span>&gt;<span class="hljs-literal">true</span>&lt;/<span class="hljs-built_in">verbose</span>&gt;<br></code></pre></td></tr></table></figure><p>:这个配置项表示启用详细输出模式。当设置为 true 时，程序或工具将输出更多的运行时信息，通常用于调试或详细日志记录，帮助开发者更好地了解程序执行的过程。</p><p>实测1.4.2版本的mybatis-generator-maven-plugin与8.2.0高版本的MySQL会出现兼容问题,提示</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">rg<span class="hljs-variable">.mybatis</span><span class="hljs-variable">.generator</span>:mybatis-generator-maven-plugin:<span class="hljs-number">1</span><span class="hljs-variable">.4</span><span class="hljs-variable">.2</span>:<span class="hljs-keyword">generate</span> (<span class="hljs-keyword">default</span>-cli) on project spring-mbg: Execution <span class="hljs-keyword">default</span>-cli of goal org<span class="hljs-variable">.mybatis</span><span class="hljs-variable">.generator</span>:mybatis-generator-maven-plugin:<span class="hljs-number">1</span><span class="hljs-variable">.4</span><span class="hljs-variable">.2</span>:<span class="hljs-keyword">generate</span> failed: Exception getting JDBC Driver: com<span class="hljs-variable">.mysql</span><span class="hljs-variable">.cj</span><span class="hljs-variable">.jdbc</span><span class="hljs-variable">.Driver</span><br></code></pre></td></tr></table></figure><p>因此暂时降低版本使用;</p><p>2.配置generatorConfig文件:</p><p>模板可在mybatis generator官网找到:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simple&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;org.hsqldb.jdbcDriver&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:hsqldb:mem:aname&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;username&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;example.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;example.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/resources&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;example.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;FooTable&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>jdbcConnection:配置对应数据库连接信息;包括数据库驱动,连接地址,用户名,密码.</li><li>javaModelGenerator:生成java模型类,配置包名和模型类路径.</li><li>sqlMapGenerator:生成mapper映射,配置包名,和映射文件路径.</li><li>table:从数据库表生成具体的模型类,配置数据表名和生成java模型类类名.</li></ul><p>3.运行配置</p><p>控制台输入<code>mvn mybatis-generator:generate</code>或者在idea侧栏maven插件点击mybatis-generator插件:</p><p>显示*<code>BUILD SUCCESS</code>*即运行成功并生成对应文件.</p>]]></content>
    
    
    
    <tags>
      
      <tag>-MyBatis -Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring WebSocket实现前后端分离在线聊天室应用</title>
    <link href="/2024/11/07/Spring%20WebSocket%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%BA%94%E7%94%A8/"/>
    <url>/2024/11/07/Spring%20WebSocket%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>WebSocket是一种协议，用于在Web应用程序和服务器之间建立实时、双向的通信连接。它通过一个单一的TCP连接提供了持久化连接，这使得Web应用程序可以更加实时地传递数据。</p><h3 id="WebSocket的优势："><a href="#WebSocket的优势：" class="headerlink" title="WebSocket的优势："></a>WebSocket的优势：</h3><ul><li><strong>实时性强</strong>：数据几乎实时传输，无需频繁轮询。</li><li><strong>效率高</strong>：减少了HTTP请求的开销，节省带宽。</li><li><strong>全双工通信</strong>：支持双向数据传输，客户端和服务器可以随时发送消息。</li></ul><h3 id="websocket-api的java实现"><a href="#websocket-api的java实现" class="headerlink" title="websocket-api的java实现:"></a>websocket-api的java实现:</h3><p>1.添加 WebSocket 相关依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.websocket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.websocket-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建一个 Java 类来处理 WebSocket 连接:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServerEndpoint(&quot;/chat&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;<br><br>    <span class="hljs-comment">//当客户端建立连接时调用</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;链接成功:&quot;</span>+session.getId());<br>    &#125;<br><br>    <span class="hljs-comment">//当客户端收到消息时调用</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message,Session session)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到消息:&quot;</span>+session.getId());<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-comment">//当客户端关闭连接时调用</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(Session session)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端关闭连接&quot;</span>+session.getId());<br>    &#125;<br><br>    <span class="hljs-comment">//发生异常时使用</span><br>    <span class="hljs-meta">@OnError</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Session session,Throwable throwable)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发送错误&quot;</span>+throwable.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>部署到支持websocket的容器中运行(如tomcat).</p><p>3.创建一个简单的 HTML 页面来连接 WebSocket 服务端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket Chat<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>WebSocket Chat<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messages&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageInput&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Type a message...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMessage()&quot;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;chat.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:8080/chat&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connected to the server&#x27;</span>);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> messagesDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messages&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">    message.<span class="hljs-property">textContent</span> = event.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">    messagesDiv.<span class="hljs-title function_">appendChild</span>(message);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Disconnected from the server&#x27;</span>);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> messageInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messageInput&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> message = messageInput.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (message) &#123;</span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">        messageInput.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当 WebSocket 连接成功建立时，前端页面会向服务器发送一条消息，并在收到服务器的响应时打印出消息内容。</p><h3 id="用Spring-Boot结合websocket-API实现"><a href="#用Spring-Boot结合websocket-API实现" class="headerlink" title="用Spring Boot结合websocket API实现:"></a>用Spring Boot结合websocket API实现:</h3><p>1.添加以下依赖：</p><ul><li>Spring Web</li><li>Spring WebSocket</li></ul><p>2.创建一个websocket配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry.addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatHandler</span>(), <span class="hljs-string">&quot;/chat&quot;</span>).setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Configuration：表示这是一个配置类，Spring 会扫描并加载这个类中的配置。<br>@EnableWebSocket：启用 WebSocket 支持。<br>WebSocketConfigurer：实现了 WebSocketConfigurer 接口，该接口提供了配置 WebSocket 的方法。<br>registerWebSocketHandlers：重写了 WebSocketConfigurer 接口中的 registerWebSocketHandlers 方法，用于注册 WebSocket 处理器。</p><p>这段代码配置了 WebSocket 支持，并注册了一个处理 &#x2F;chat 路径的 ChatHandler，同时允许所有来源的跨域请求。</p><h4 id="3-实现-WebSocket-Handler"><a href="#3-实现-WebSocket-Handler" class="headerlink" title="3. 实现 WebSocket Handler"></a>3. 实现 WebSocket Handler</h4><p><code>ChatHandler</code> 是处理 WebSocket 消息的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextWebSocketHandler</span> &#123;<br>    <span class="hljs-comment">// 保存所有会话</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;WebSocketSession&gt; sessions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 使用 WebSocketSession 而非 jakarta.websocket.Session</span><br><br>    <span class="hljs-comment">// 会话建立后，将当前会话添加到 sessions 列表中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        sessions.add(session);<br>    &#125;<br><br>    <span class="hljs-comment">// 将收到的消息广播给所有客户端</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (WebSocketSession webSocketSession : sessions) &#123;<br>            webSocketSession.sendMessage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(message.getPayload()));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 会话关闭</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        sessions.remove(session);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>ChatHandler</code> 是一个继承自 <code>TextWebSocketHandler</code> 的类，专门用于处理 WebSocket 连接的消息和事件。它负责管理客户端的连接、接收消息、并将消息广播给所有已连接的客户端。这个类实现了 WebSocket 通信的基础功能，如连接管理、消息处理和会话关闭处理。</p><ul><li><h4 id="1-sessions-列表"><a href="#1-sessions-列表" class="headerlink" title="1. sessions 列表"></a>1. <code>sessions</code> 列表</h4><ul><li><strong>描述</strong>：这是一个 <code>List&lt;WebSocketSession&gt;</code>，用于保存所有当前活动的 WebSocket 会话。每当客户端建立 WebSocket 连接时，当前会话将被添加到这个列表中，当客户端断开连接时，会从这个列表中移除。它确保消息能够被广播到所有连接中的客户端。</li></ul><h4 id="2-afterConnectionEstablished-WebSocketSession-session"><a href="#2-afterConnectionEstablished-WebSocketSession-session" class="headerlink" title="2. afterConnectionEstablished(WebSocketSession session)"></a>2. <code>afterConnectionEstablished(WebSocketSession session)</code></h4><ul><li><strong>描述</strong>：当 WebSocket 连接建立时调用此方法。此时，服务器会将新连接的客户端会话对象 <code>session</code> 添加到 <code>sessions</code> 列表中。管理新连接的客户端会话，允许后续对所有已连接客户端的消息进行广播。</li></ul><h4 id="3-handleTextMessage-WebSocketSession-session-TextMessage-message"><a href="#3-handleTextMessage-WebSocketSession-session-TextMessage-message" class="headerlink" title="3. handleTextMessage(WebSocketSession session, TextMessage message)"></a>3. <code>handleTextMessage(WebSocketSession session, TextMessage message)</code></h4><ul><li><p><strong>描述</strong>：当服务器收到某个客户端发送的文本消息时触发该方法。方法参数中包含了发送消息的会话 <code>session</code> 和消息内容 <code>message</code>。</p><p>服务器会遍历 <code>sessions</code> 列表，并将接收到的消息广播给所有连接的客户端。此功能使所有客户端能够实时接收到其它客户端发送的消息。</p></li></ul><h4 id="4-afterConnectionClosed-WebSocketSession-session-CloseStatus-status"><a href="#4-afterConnectionClosed-WebSocketSession-session-CloseStatus-status" class="headerlink" title="4. afterConnectionClosed(WebSocketSession session, CloseStatus status)"></a>4. <code>afterConnectionClosed(WebSocketSession session, CloseStatus status)</code></h4><ul><li><strong>描述</strong>：当 WebSocket 连接关闭时调用此方法。此时，服务器会将关闭的客户端会话对象 <code>session</code> 从 <code>sessions</code> 列表中移除。清理已经断开的客户端连接，确保 <code>sessions</code> 列表中只包含当前活跃的 WebSocket 会话。</li></ul></li></ul><p>4.创建一个简单的vue页面</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>在线聊天<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chat-window&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;msg in messages&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputMessage&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;sendMessage&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入消息...&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">socket</span>: <span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">inputMessage</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">messages</span>: []</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">connectWebSocket</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">connectWebSocket</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:8080/chat&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>.<span class="hljs-title function_">push</span>(event.<span class="hljs-property">data</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputMessage</span>.<span class="hljs-title function_">trim</span>() !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputMessage</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputMessage</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.chat-window</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow-y</span>: auto;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.message</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>访问页面可以看到:</p><p><img src="/images/01.png" alt="图片"></p><p>试着在另一个窗口发送消息;</p><p><img src="/images/02.png" alt="图片"></p><p>可以显示对应消息.</p><p>本文后端基于Spring WebSocket实现了简单的前后端分离在线聊天室应用,当然这只是一个基础的应用,距离完整还有距离,希望以后有机会完善.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Vue</tag>
      
      <tag>Websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring boot+Vue实现简单在线个人博客</title>
    <link href="/2024/11/01/Spring%20boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/11/01/Spring%20boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>本文为Spring学习项目之一:</p><p>1.引入依赖,创建Vue项目</p><p>2.创建数据库</p><p>3.创建实体类和JPA接口</p><p>4.创建服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> PostRepository postRepository;<br><br>    <span class="hljs-comment">//查询所有blog</span><br>    <span class="hljs-keyword">public</span> List&lt;Post&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> postRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找blog</span><br>    <span class="hljs-keyword">public</span> Optional&lt;Post&gt; <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> postRepository.findById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//保存blog</span><br>    <span class="hljs-keyword">public</span> Post <span class="hljs-title function_">save</span><span class="hljs-params">(Post post)</span>&#123;<br>        <span class="hljs-keyword">return</span> postRepository.save(post);<br>    &#125;<br><br>    <span class="hljs-comment">//删除blog</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        postRepository.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/posts&quot;)</span><br><span class="hljs-meta">@CrossOrigin(origins = &quot;http://localhost:5173/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br><br>    <span class="hljs-comment">// 获取所有文章</span><br>    <span class="hljs-meta">@GetMapping(&quot;/all&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Post&gt; <span class="hljs-title function_">getAllPosts</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> postService.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">// 根据ID获取文章</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Post&gt; <span class="hljs-title function_">getPostById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span> &#123;<br>        Optional&lt;Post&gt; post = postService.findById(id);<br>        <span class="hljs-keyword">return</span> post.map(ResponseEntity::ok)<br>                .orElseGet(() -&gt; ResponseEntity.notFound().build());<br>    &#125;<br><br>    <span class="hljs-comment">// 创建新文章</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Post <span class="hljs-title function_">createPost</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Post post)</span> &#123;<br>        post.setCreatedAt(java.time.LocalDateTime.now());<br>        <span class="hljs-keyword">return</span> postService.save(post);<br>    &#125;<br><br>    <span class="hljs-comment">// 更新现有文章</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Post&gt; <span class="hljs-title function_">updatePost</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id, <span class="hljs-meta">@RequestBody</span> Post postDetails)</span> &#123;<br>        Optional&lt;Post&gt; optionalPost = postService.findById(id);<br>        <span class="hljs-keyword">if</span> (optionalPost.isPresent()) &#123;<br>            <span class="hljs-type">Post</span> <span class="hljs-variable">post</span> <span class="hljs-operator">=</span> optionalPost.get();<br>            post.setTitle(postDetails.getTitle());<br>            post.setContent(postDetails.getContent());<br>            <span class="hljs-type">Post</span> <span class="hljs-variable">updatedPost</span> <span class="hljs-operator">=</span> postService.save(post);<br>            <span class="hljs-keyword">return</span> ResponseEntity.ok(updatedPost);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除文章</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deletePost</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span> &#123;<br>        Optional&lt;Post&gt; post = postService.findById(id);<br>        <span class="hljs-keyword">if</span> (post.isPresent()) &#123;<br>            postService.deleteById(id);<br>            <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.前端页面:</p><p>(1)博客主页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;我的博客&lt;/h1&gt;<br>  &lt;router-link to=&quot;/create&quot;&gt;创建新文章&lt;/router-link&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;post in posts&quot; :key=&quot;post.id&quot;&gt;<br>        &lt;router-link :to=&quot;`/posts/$&#123;post.id&#125;`&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/router-link&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;;<br><br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            posts: [],<br>        &#125;;<br>    &#125;,<br>    created() &#123;<br>        axios.get(&#x27;http://localhost:8080/api/posts/all&#x27;).then(response =&gt; &#123;<br>            this.posts = response.data;<br>        &#125;);<br>    &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>(2)创建博客页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt; <br>    &lt;div&gt; <br>      &lt;h1&gt;创建新文章&lt;/h1&gt; <br>      &lt;form @submit.prevent=&quot;createPost&quot;&gt; <br>        &lt;div&gt; <br>          &lt;label for=&quot;title&quot;&gt;标题：&lt;/label&gt; <br>          &lt;input type=&quot;text&quot; v-model=&quot;post.title&quot; required /&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>          &lt;label for=&quot;content&quot;&gt;内容：&lt;/label&gt;<br>          &lt;textarea v-model=&quot;post.content&quot; required&gt;&lt;/textarea&gt;<br>        &lt;/div&gt;<br>        &lt;button type=&quot;submit&quot;&gt;发布&lt;/button&gt;<br>      &lt;/form&gt; <br>    &lt;/div&gt; <br>  &lt;/template&gt; <br>  <br>  &lt;script&gt;<br>  import axios from &#x27;axios&#x27;;<br>  <br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        post: &#123;<br>          title: &#x27;&#x27;,<br>          content: &#x27;&#x27;,<br>        &#125;,<br>      &#125;;<br>    &#125;,<br>    methods: &#123; <br>      createPost() &#123; <br>        console.log(this.post); // 检查 post 是否定义 <br>        axios.post(&#x27;http://localhost:8080/api/posts&#x27;, this.post)<br>          .then(() =&gt; &#123;<br>            this.$router.push(&#x27;/&#x27;);<br>          &#125;)<br>          .catch(error =&gt; &#123; <br>            console.error(&quot;发布文章失败:&quot;, error); <br>          &#125;); <br>      &#125;, <br>    &#125;, <br>  &#125;<br>  &lt;/script&gt;<br>  <br></code></pre></td></tr></table></figure><p>(3)博客详情页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>      &lt;h1&gt;&#123;&#123; post.title &#125;&#125;&lt;/h1&gt;<br>      &lt;p&gt;&#123;&#123; post.content &#125;&#125;&lt;/p&gt;<br>      &lt;router-link to=&quot;/&quot;&gt;返回首页&lt;/router-link&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>  <br>  &lt;script&gt;<br><br>import axios from &quot;axios&quot;;<br><br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        post: &#123;&#125;,<br>      &#125;;<br>    &#125;,<br>    created() &#123;<br>      const id = this.$route.params.id;<br>      axios.get(`http://localhost:8080/api/posts/$&#123;id&#125;`)<br>        .then(response =&gt; &#123;<br>          this.post = response.data;<br>        &#125;)<br>        .catch(error =&gt; &#123;<br>          console.error(&quot;获取文章详情失败:&quot;, error);<br>        &#125;);<br>    &#125;,<br>  &#125;;<br>  &lt;/script&gt;<br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring boot+Mybatis实现前后端分离CRUD操作</title>
    <link href="/2024/10/28/Spring-boot+Mybatis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BBCRUD%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/10/28/Spring-boot+Mybatis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BBCRUD%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>持久层框架个人更倾向于使用JPA,但考虑到Mybatis国内使用的广泛性,以此篇文章记录Spring boot+Mybatis实现前后端分离CRUD操作的学习过程,旨在熟悉Mybatis持久层的使用.</p><p>1.引入相关依赖</p><ul><li>Spring Web</li><li>MyBatis Framework</li><li>MySQL Driver</li><li>Lombok (可选)</li></ul><p>2.配置 application.properties<br>在 src&#x2F;main&#x2F;resources 目录下创建或编辑 application.properties 文件，配置数据库连接信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/your_database?useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">your_username</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">your_password</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><p>3.创建User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> verified;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> phone;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.创建UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//查询所有用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from users&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查询用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from users where id = #&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//添加用户</span><br>    <span class="hljs-meta">@Insert(&quot;insert into users (id, name, birthday, address, verified, phone) VALUES (#&#123;id&#125;,#&#123;name&#125;,#&#123;birthday&#125;,#&#123;address&#125;,#&#123;verified&#125;,#&#123;phone&#125;)&quot;)</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//更新用户</span><br>    <span class="hljs-meta">@Update(&quot;update users set name = #&#123;name&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125;,verified = #&#123;vierfied&#125;,phone = #&#123;phone&#125; where id = #&#123;id&#125; &quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-meta">@Delete(&quot;delete from users where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">//查询所有用户</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">//根据ID查询</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.findById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.insertUser(user);<br>    &#125;<br><br>    <span class="hljs-comment">//更新用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.updateUser(user);<br>    &#125;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.deleteUser(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.创建Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(origins = &quot;http://localhost:5173/&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/all&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.findAll();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.findById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.insertUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping(&quot;/update&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.updateUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.deleteUser(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.创建 MyBatis XML 映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectAllColumns&quot;</span>/&gt;</span><br>        FROM user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectAllColumns&quot;</span>/&gt;</span><br>        FROM user WHERE id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        INSERT INTO user(name, email, birthday, address, gender) VALUES(#&#123;name&#125;, #&#123;email&#125;, #&#123;birthday&#125;, #&#123;address&#125;, #&#123;gender&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span>&gt;</span><br>        UPDATE user SET name = #&#123;name&#125;, email = #&#123;email&#125;, birthday = #&#123;birthday&#125;, address = #&#123;address&#125;, gender = #&#123;gender&#125; WHERE id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span>&gt;</span><br>        DELETE FROM user WHERE id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllColumns&quot;</span>&gt;</span><br>        SELECT id, name, email, birthday, address, gender<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>8.完成前端页面</p><template>  <h1>用户管理</h1>  <div class="users">    <ul>      <li v-for="user in users" :key="user.id">        <div v-if="!user.isEditing">          {{ user.name }} {{ user.age }}岁 {{ user.address }} {{ user.phone }} {{ user.verified ? '已验证' : '未验证' }}          <button @click="edit(user)">编辑</button>          <button @click="edit(user)">编辑</button>          <button @click="deleteUser(user.id)">删除</button>        </div>        <div v-else>          <input v-model="user.name" />          <input type="date" v-model="user.birthday" @change="calculateAge(user)" /> <!-- 使用日期输入 -->          <input v-model="user.address" />          <input v-model="user.phone" />          <input type="checkbox" v-model="user.verified" /> 已验证          <button @click="updateUser(user)">保存</button>          <button @click="cancelEdit(user)">取消</button>        </div>      </li>    </ul>    <form @submit.prevent="addUser">      <input type="text" placeholder="姓名" v-model="newUser.name" required>      <input type="date" v-model="newUser.birthday" @change="calculateAge(newUser)" required /> <!-- 使用日期输入 -->      <input type="text" placeholder="地址" v-model="newUser.address" required>      <input type="text" placeholder="手机号" v-model="newUser.phone" required>      <input type="checkbox" v-model="newUser.verified" /> 是否已验证      <button type="submit">添加</button>    </form>  </div></template><script>import axios from 'axios'```javascriptexport default {  data() {    return {      users: [],      newUser: {        name: '',        birthday: '', // 改为birthday        age: '',        address: '',        phone: '',        verified: false      }    }  },  methods: {    fetchUsers() {      axios.get("http://localhost:8080/api/users/all")        .then(response => {          this.users = response.data.map(user => {            user.age = this.calculateAgeFromBirthday(user.birthday); // 添加age计算            return { ...user, isEditing: false };          });        })        .catch(error => {          console.error('获取用户数据失败', error);        });    },    addUser() {      axios.post("http://localhost:8080/api/users/insert", this.newUser)        .then(response => {          response.data.age = this.calculateAgeFromBirthday(response.data.birthday); // 计算新用户的年龄          this.users.push({ ...response.data, isEditing: false });          this.resetNewUser();        })        .catch(error => {          console.error('添加用户失败', error);        });    },    edit(user) {      user.isEditing = true; // 进入编辑模式    },    updateUser(user) {      axios.put(`http://localhost:8080/api/users/update/${user.id}`, user)        .then(response => {          user.isEditing = false; // 退出编辑模式          Object.assign(user, response.data); // 更新用户信息          user.age = this.calculateAgeFromBirthday(user.birthday); // 更新年龄        })        .catch(error => {          console.error('更新用户失败', error);        });    },    cancelEdit(user) {      user.isEditing = false; // 取消编辑    },    deleteUser(userId) {      axios.delete(`http://localhost:8080/api/users/delete/${userId}`)        .then(response => {          this.users = this.users.filter(user => user.id !== userId);        })        .catch(error => {          console.error('删除用户失败', error);        });    },    resetNewUser() {      this.newUser = {        name: '',        birthday: '',        age: '',        address: '',        phone: '',        verified: false      };    },    calculateAgeFromBirthday(birthday) {      const birthDate = new Date(birthday);      const ageDiff = Date.now() - birthDate.getTime();      const ageDate = new Date(ageDiff);      return Math.abs(ageDate.getUTCFullYear() - 1970); // 返回年龄    },    calculateAge(user) {      user.age = this.calculateAgeFromBirthday(user.birthday);    }  },  mounted() {    this.fetchUsers();  }}</scrip>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg 教程（Windows 版）</title>
    <link href="/2024/10/27/FFmpeg-%E6%95%99%E7%A8%8B%EF%BC%88Windows-%E7%89%88%EF%BC%89/"/>
    <url>/2024/10/27/FFmpeg-%E6%95%99%E7%A8%8B%EF%BC%88Windows-%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="FFmpeg-教程（Windows-版）"><a href="#FFmpeg-教程（Windows-版）" class="headerlink" title="FFmpeg 教程（Windows 版）"></a>FFmpeg 教程（Windows 版）</h1><p>FFmpeg 是一个开源的多媒体框架，用于处理音视频文件，包括转码、剪辑、合并、分割等功能。本文将为您介绍如何在 Windows 操作系统上安装和使用 FFmpeg。</p><hr><h2 id="FFmpeg-简介"><a href="#FFmpeg-简介" class="headerlink" title="FFmpeg 简介"></a>FFmpeg 简介</h2><p>FFmpeg 是一个免费的开源项目，包含了一套用于处理音视频数据的工具和库。它支持几乎所有已知的音视频格式，并且可以执行多种复杂的操作，如转码、转封装、流媒体处理等。由于其强大的功能和灵活性，FFmpeg 被广泛应用于各种多媒体项目中。</p><h2 id="下载-FFmpeg"><a href="#下载-FFmpeg" class="headerlink" title="下载 FFmpeg"></a>下载 FFmpeg</h2><ol><li><strong>访问官方网站</strong>：前往 FFmpeg 的官方网站 <a href="https://ffmpeg.org/download.html%E3%80%82">https://ffmpeg.org/download.html。</a></li><li><strong>选择 Windows 版本</strong>：在“Get packages &amp; executable files”部分，点击 Windows 的图标，进入 Windows 版本的下载页面。</li><li><strong>选择预编译版本</strong>：推荐使用 Gyan.dev 或 <a href="https://github.com/BtbN/FFmpeg-Builds/releases">BtbN</a> 提供的预编译版本。</li><li><strong>下载压缩包</strong>：选择适合您系统的版本（通常为 <code>ffmpeg-release-essentials.zip</code> 或类似名称的文件），点击下载。</li></ol><h2 id="安装-FFmpeg"><a href="#安装-FFmpeg" class="headerlink" title="安装 FFmpeg"></a>安装 FFmpeg</h2><ol><li><p><strong>解压压缩包</strong>：将下载的压缩包解压到您希望安装 FFmpeg 的目录，例如 <code>C:\ffmpeg</code>。</p></li><li><p><strong>文件结构</strong>：解压后，您应该看到类似以下的文件夹结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">makefile复制代码C:\ffmpeg<br>├── bin<br>│   ├── ffmpeg<span class="hljs-selector-class">.exe</span><br>│   ├── ffplay<span class="hljs-selector-class">.exe</span><br>│   └── ffprobe<span class="hljs-selector-class">.exe</span><br>├── docs<br>└── ...（其他文件夹）<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了在命令提示符（CMD）或 PowerShell 中随时使用 FFmpeg 命令，建议将 FFmpeg 的 <code>bin</code> 目录添加到系统的环境变量中。</p><ol><li><p><strong>打开环境变量设置</strong>：</p><ul><li>右键点击“此电脑”或“我的电脑”，选择“属性”。</li><li>点击左侧的“高级系统设置”。</li><li>在“系统属性”窗口中，点击“环境变量”按钮。</li></ul></li><li><p><strong>编辑 PATH 变量</strong>：</p><ul><li>在“系统变量”区域，找到并选中 <code>Path</code>，然后点击“编辑”。</li><li>点击“新建”，然后输入 FFmpeg 的 <code>bin</code> 目录路径，例如 <code>C:\ffmpeg\bin</code>。</li><li>确认所有窗口以保存设置。</li></ul></li><li><p><strong>验证安装</strong>：</p><ul><li><p>打开命令提示符（CMD）或 PowerShell。</p></li><li><p>输入以下命令并回车：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffmpeg -version<br></code></pre></td></tr></table></figure></li><li><p>如果安装成功，您将看到 FFmpeg 的版本信息。<img src="C:\Users\26578\AppData\Roaming\Typora\typora-user-images\image-20241027205527078.png" alt="image-20241027205527078"></p></li></ul></li></ol><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>以下是一些常用的 FFmpeg 命令示例，帮助您快速上手.</p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -version<br></code></pre></td></tr></table></figure><h3 id="视频格式转换"><a href="#视频格式转换" class="headerlink" title="视频格式转换"></a>视频格式转换</h3><p>将一个视频文件从一种格式转换为另一种格式。例如，将 <code>input.mp4</code> 转换为 <code>output.avi</code>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffmpeg -i input.mp4 output.avi<br></code></pre></td></tr></table></figure><h3 id="提取音频"><a href="#提取音频" class="headerlink" title="提取音频"></a>提取音频</h3><p>从视频文件中提取音频，保存为 MP3 格式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">q</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span> -map <span class="hljs-selector-tag">a</span> output.mp3<br></code></pre></td></tr></table></figure><h3 id="视频剪辑"><a href="#视频剪辑" class="headerlink" title="视频剪辑"></a>视频剪辑</h3><p>剪切视频的一部分。例如，截取 <code>input.mp4</code> 从第 00:01:00 到第 00:02:00 的部分：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -ss <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span> -i input.mp4 -to <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span> -c copy output.mp4<br></code></pre></td></tr></table></figure><h3 id="合并视频文件"><a href="#合并视频文件" class="headerlink" title="合并视频文件"></a>合并视频文件</h3><p>将多个视频文件合并为一个。首先，创建一个文本文件 <code>filelist.txt</code>，内容如下：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video1.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video2.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video3.mp4&#x27;</span><br></code></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ffmpeg -f <span class="hljs-built_in">concat</span> -safe <span class="hljs-number">0</span> -i filelist.txt -c copy <span class="hljs-built_in">output</span>.mp4<br></code></pre></td></tr></table></figure><h3 id="转换视频编码"><a href="#转换视频编码" class="headerlink" title="转换视频编码"></a>转换视频编码</h3><p>将视频编码转换为 H.264 编码，音频编码为 AAC：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mkv</span> -c:v libx264 -c:<span class="hljs-selector-tag">a</span> aac output.mp4<br></code></pre></td></tr></table></figure><h3 id="调整视频分辨率"><a href="#调整视频分辨率" class="headerlink" title="调整视频分辨率"></a>调整视频分辨率</h3><p>将视频分辨率调整为 1280x720：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i input.mp4 -vf scale=<span class="hljs-number">1280</span>:<span class="hljs-number">720</span> output.mp4<br></code></pre></td></tr></table></figure><h3 id="压缩视频文件大小"><a href="#压缩视频文件大小" class="headerlink" title="压缩视频文件大小"></a>压缩视频文件大小</h3><p>通过调整比特率来压缩视频文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">b</span>:v <span class="hljs-number">1000</span>k -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">128</span>k output.mp4<br></code></pre></td></tr></table></figure><h3 id="添加字幕"><a href="#添加字幕" class="headerlink" title="添加字幕"></a>添加字幕</h3><p>将外部字幕文件（如 SRT）嵌入到视频中：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> subtitles<span class="hljs-selector-class">.srt</span> -c copy -c:s mov_text output.mp4<br></code></pre></td></tr></table></figure><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制全屏视频，保存为 <code>output.mp4</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -f gdigrab -framerate <span class="hljs-number">30</span> -i desktop output.mp4<br></code></pre></td></tr></table></figure><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>FFmpeg 具有极其丰富的功能，以下是一些高级应用场景：</p><h3 id="流媒体推流"><a href="#流媒体推流" class="headerlink" title="流媒体推流"></a>流媒体推流</h3><p>将视频流推送到 RTMP 服务器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bash<br><br><br>复制代码<br>ffmpeg -re -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -preset veryfast -maxrate <span class="hljs-number">3000</span>k -bufsize <span class="hljs-number">6000</span>k -c:<span class="hljs-selector-tag">a</span> aac -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">160</span>k -f flv rtmp:<span class="hljs-comment">//yourserver/live/stream</span><br></code></pre></td></tr></table></figure><h3 id="视频水印"><a href="#视频水印" class="headerlink" title="视频水印"></a>视频水印</h3><p>在视频上添加图片水印：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bash<br><br><br>复制代码<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> watermark<span class="hljs-selector-class">.png</span> -filter_complex <span class="hljs-string">&quot;overlay=10:10&quot;</span> output.mp4<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ffmpeg.org/documentation.html">FFmpeg 官方文档</a></li><li><a href="https://ffmpeg.org.cn/">FFmpeg 中文网</a></li><li><a href="https://www.ffmpeg.org/ffmpeg.html">FFmpeg 命令大全</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2安装docker和配置docker compose并编排服务</title>
    <link href="/2024/10/27/WSL2%E5%AE%89%E8%A3%85docker%E5%92%8C%E9%85%8D%E7%BD%AEdocker-compose%E5%B9%B6%E7%BC%96%E6%8E%92%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/10/27/WSL2%E5%AE%89%E8%A3%85docker%E5%92%8C%E9%85%8D%E7%BD%AEdocker-compose%E5%B9%B6%E7%BC%96%E6%8E%92%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在WSL2下安装Docker和Docker Compose并创建一个 docker-compose.yml 文件来编排 MySQL、Redis 和 MongoDB 服务的步骤如下：</p><ol><li>安装Docker<br>首先在WSL2镜像上安装Docker：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io -y<br></code></pre></td></tr></table></figure><ol start="2"><li>安装Docker Compose<br>Docker Compose 是一个帮助你定义和运行多容器Docker应用的工具，使用以下命令来安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>然后，给予它执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>验证安装成功：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建docker-compose.yml文件<br>现在创建一个docker-compose.yml文件，将 MySQL、Redis 和 MongoDB 定义为服务，并将它们的数据目录映射到宿主机上。</li></ol><p>在你喜欢的目录中创建 docker-compose.yml 文件然后编辑文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-container</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">rootpassword</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">mydb</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">user</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">ports:</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>     <span class="hljs-attr">lumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql_data:/var/lib/mysql</span><br>          <span class="hljs-attr">tworks:</span><br>             <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-container</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis_data:/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br>  <span class="hljs-attr">mongo:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo-container</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;27017:27017&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongo_data:/data/db</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">backend:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br><br></code></pre></td></tr></table></figure><p>4.启动服务<br>保存并退出编辑器，然后运行以下命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>这将启动 MySQL、Redis 和 MongoDB 三个容器，并使它们在后台运行。</p><ol start="5"><li>登录到 MySQL、Redis 和 MongoDB<br>现在，分别登录到这些服务中。</li></ol><p>登录到MySQL：<br>使用以下命令连接到 MySQL 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql-container mysql -u root -p<br></code></pre></td></tr></table></figure><p>你将会提示输入密码，输入你在 docker-compose.yml 文件中设置的 MYSQL_ROOT_PASSWORD (rootpassword)。</p><p>登录到Redis：<br>使用以下命令连接到 Redis 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-container redis-cli<br></code></pre></td></tr></table></figure><p>登录到MongoDB：<br>使用以下命令连接到 Mongo 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongo-container mongo<br></code></pre></td></tr></table></figure><ol start="6"><li>检查数据持久化<br>服务的数据将映射到宿主机的目录中（.&#x2F;mysql_data、.&#x2F;redis_data 和 .&#x2F;mongo_data），可以通过这些文件夹查看服务的持久化数据。</li></ol><p>总结<br>你现在已经在WSL2系统中安装了Docker和Docker Compose，并使用 docker-compose.yml 文件编排 MySQL、Redis 和 MongoDB 服务。服务启动后，可以通过 docker exec 命令登录到每个服务中，数据也被映射到宿主机的目录，确保数据持久化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>wsl windos docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JJWT 0.12.6更新学习</title>
    <link href="/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>最近学习JWT时遇到许多方法显示已弃用,JWT更新速度非常快,网上的教程和AI回复大多缺乏时效性,因此我记录下更新学习的过程;本文参考JWT GitHub首页:</p><p><a href="https://github.com/jwtk/jjwt?tab=readme-ov-file">https://github.com/jwtk/jjwt?tab=readme-ov-file</a></p><p>;并感谢ChatGPT提供了详尽的解释.</p><p>JWT基础知识:</p><p><strong>JWT (JSON Web Token)</strong>:** 是一种基于JSON的令牌，用于在网络应用中安全地传输信息。它通常用于身份验证和授权。JWT由三部分组成：<code>Header</code>、<code>Payload</code> 和 <code>Signature</code>，通过点号（<code>.</code>）分隔。JWT可以确保数据的完整性（不可篡改）并通过加密保证敏感信息的安全。</p><table><thead><tr><th align="left"><strong>部分</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>Header</strong></td><td>定义了JWT的元数据，主要包括签名算法和令牌类型。</td><td><code>json&lt;br&gt;&#123; &quot;alg&quot;: &quot;HS256&quot;,&lt;br&gt; &quot;typ&quot;: &quot;JWT&quot;&#125;</code></td></tr><tr><td align="left"><strong>Payload</strong></td><td>包含实际传递的数据（声明），可以包括注册声明、公共声明和私有声明。</td><td><code>json&#123; &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;,&quot;admin&quot;: true, &quot;exp&quot;: 1516239022&lt;br&gt;&#125;</code></td></tr><tr><td align="left"><strong>Signature</strong></td><td>用于验证JWT的完整性和真实性，通过对Header和Payload进行签名生成。</td><td><code>HMACSHA256(base64UrlEncode(Header) + &quot;.&quot; + base64UrlEncode(Payload), secret)</code></td></tr></tbody></table><p><strong>JJWT(Java JWT)</strong>:** 是一个Java库，用于创建和验证JWT（JSON Web Token）。它简化了在Java应用中使用JWT的过程。JJWT由一个开源社区开发，支持生成、解析和验证JWT的功能。本文学习的是最新的JJWT。</p><p><strong>JWS(JSON Web Signature):</strong> 是一种用来生成和验证数字签名的标准，基于JSON格式。JWS确保了数据的完整性和真实性。JWT的签名部分实际上就是使用了JWS。</p><p><strong>JWE(JSON Web Encryption)</strong>: 是一种用来加密数据的标准，也基于JSON格式。JWE与JWS不同之处在于，JWS保证数据的完整性（数据不可篡改），而JWE确保数据的机密性（数据加密后不可被读取）。</p><p>1.引入依赖</p><p>引入JWT最新的maven依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson <span class="hljs-keyword">if</span> Gson is preferred --&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2.生成JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生成一个HS256算法的密钥</span><br><span class="hljs-type">SecretKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Jwts.SIG.HS256.key().build();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">jws</span> <span class="hljs-operator">=</span> Jwts.builder()<br>           <span class="hljs-comment">// 设置JWT的主体部分，通常包含用户标识</span><br>           .subject(<span class="hljs-string">&quot;sub&quot;</span>) <br>           <br>           <span class="hljs-comment">// 添加自定义声明</span><br>           .claim(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>)<br>           <br>           <span class="hljs-comment">// 生成的密钥对JWT进行签名</span><br>           .signWith(key)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行者信息</span><br>           .issuer(<span class="hljs-string">&quot;example.com&quot;</span>)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行时间</span><br>           .issuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>           <br>           <span class="hljs-comment">// 设置JWT的过期时间，这里设置为当前时间加1小时</span><br>           .expiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">3600000</span>))<br>           <br>           <span class="hljs-comment">//生成最终的JWT字符串</span><br>           .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.解析JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Jws&lt;Claims&gt; claimsJws = Jwts.parser()<br>        <span class="hljs-comment">// 使用指定的密钥验证JWT的签名</span><br>        .verifyWith(key)<br>        .build()<br>        <span class="hljs-comment">// 解析JWT并验证其签名，返回包含claims的Jws对象</span><br>        .parseSignedClaims(jws);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-java -Spring -JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring  Vue3实现ToDoList待办事项列表</title>
    <link href="/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/"/>
    <url>/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>为了熟悉spring,练习TodoList的实例,以本文记录学习过程:</p><p>1.添加相关依赖:本项目使用的是spring boot+vue3 数据库使用MySQL,持久层使用JPA</p><p>后端Api</p><p>2.建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table todo(id int auto_increment primary key ,<br>                title varchar(50) ,<br>                description varchar(100),<br>                completed boolean default false,<br>                created_at TIMESTAMP default CURRENT_TIMESTAMP);<br></code></pre></td></tr></table></figure><p>3.application.properties配置数据库连接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/todolist</span><br></code></pre></td></tr></table></figure><p>4.创建实体类Todo并使用JPA注解映射数据库表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;todo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> completed;<br><br>    <span class="hljs-meta">@Temporal(TemporalType.TIMESTAMP)</span> <span class="hljs-comment">//指定create_at字段为时间戳类型</span><br>    <span class="hljs-keyword">private</span> Date create_at;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">TodoRepository</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">Todo</span>,<span class="hljs-symbol">Integer</span>&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.完成TodoService,实现对Todo的操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-title class_">TodoRepository</span> todoRepository;<br>    <span class="hljs-title class_">Todo</span> todo;<br><br>    <span class="hljs-comment">//列出所有Todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findAllTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> todoRepository.<span class="hljs-title function_">findAll</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">finTodoById</span>(<span class="hljs-params">int id</span>)&#123; <span class="hljs-comment">//使用Optional包装,避免返回null</span><br>        <span class="hljs-keyword">return</span> todoRepository.<span class="hljs-title function_">findById</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Todo</span> newTodo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Todo</span>();<br>        <span class="hljs-keyword">return</span> newTodo;<br>    &#125;<br><br>    <span class="hljs-comment">//修改todo</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"><span class="hljs-title class_">Todo</span> todo, <span class="hljs-title class_">String</span> title, <span class="hljs-title class_">String</span> description, <span class="hljs-built_in">boolean</span> completed</span>) &#123;<br>        todo.<span class="hljs-title function_">setTitle</span>(title);<br>        todo.<span class="hljs-title function_">setDescription</span>(description);<br>        todo.<span class="hljs-title function_">setCompleted</span>(completed);<br>    &#125;<br><br>    <span class="hljs-comment">//删除todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">int id</span>)&#123;<br>        <span class="hljs-keyword">if</span> (todoRepository.<span class="hljs-title function_">findById</span>(id).<span class="hljs-title function_">isPresent</span>())&#123;<br>            todoRepository.<span class="hljs-title function_">deleteById</span>(id);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>5.完成TodoController,调用服务层方法,实现后端接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/todo&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-title class_">TodoService</span> todoService;<br>    <span class="hljs-title class_">Todo</span> todo;<br><br>    <span class="hljs-comment">//列出所有Todo</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findAllTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">findAllTodo</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找Todo</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findTodoById</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id</span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">finTodoById</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加Todo</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> <span class="hljs-title class_">Todo</span> newTodo</span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">addTodo</span>(newTodo);<br>    &#125;<br><br>    <span class="hljs-comment">//删除Todo</span><br>    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id</span>)&#123;<br>       todoService.<span class="hljs-title function_">deleteTodo</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//修改Todo</span><br>    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id,<span class="hljs-meta">@RequestBody</span> <span class="hljs-title class_">Todo</span> updatetodo</span>) &#123;<br>        todoService.<span class="hljs-title function_">updateTodo</span>(todo,updatetodo.<span class="hljs-title function_">getTitle</span>(), updatetodo.<span class="hljs-title function_">getDescription</span>(), updatetodo.<span class="hljs-title function_">isCompleted</span>());<br>        <span class="hljs-keyword">return</span> todo;<br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>前端页面</p><template>   <div class="todo-list">     <h1>待办事项</h1>     <form @submit.prevent="addTodo">       <input v-model="newTodo.title" placeholder="标题" required />       <input v-model="newTodo.description" placeholder="描述" />       <button type="submit">添加</button>     </form>     <ul>       <li v-for="todo in todos" :key="todo.id">         <span :class="{ completed: todo.completed }">            -          </span>         <button @click="toggleComplete(todo)">完成</button>         <button @click="deleteTodo(todo.id)">删除</button>       </li>     </ul>   </div></template><script> import axios from 'axios';<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">todos</span>: [],<br>       <span class="hljs-attr">newTodo</span>: &#123;<br>         <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>         <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>         <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>       &#125;<br>     &#125;;<br>   &#125;,<br>   <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 移到根对象</span><br>     <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fetchTodos</span>();<br>   &#125;,<br>   <span class="hljs-attr">methods</span>: &#123;<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetchTodos</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/todo/all&#x27;</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = response.<span class="hljs-property">data</span>;<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/todo&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">push</span>(response.<span class="hljs-property">data</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span> = &#123;<br>           <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>         &#125;;<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">toggleComplete</span>(<span class="hljs-params">todo</span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> updatedTodo = &#123; ...todo, <span class="hljs-attr">completed</span>: !todo.<span class="hljs-property">completed</span> &#125;;<br>         <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">put</span>(<span class="hljs-string">`http://localhost:8080/api/todo/<span class="hljs-subst">$&#123;todo.id&#125;</span>`</span>, updatedTodo);<br>         <span class="hljs-keyword">const</span> insex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">indexOf</span>(todo);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">splice</span>(insex, <span class="hljs-number">1</span>, updatedTodo); <span class="hljs-comment">// 使用正确的变量名</span><br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">id</span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`http://localhost:8080/api/todo/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== id);<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></script><style scoped>#app { height: 90vh; display: flex; align-items: center; justify-content: center;}</style>]]></content>
    
    
    
    <tags>
      
      <tag>java, spring, vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/10/23/test/"/>
    <url>/2024/10/23/test/</url>
    
    <content type="html"><![CDATA[<p>宣州谢朓楼饯别校书叔云</p><p>李白</p><p>弃我去者，昨日之日不可留;乱我心者，今日之日多烦忧。</p><p>长风万里送秋雁，对此可以酣高楼。</p><p>蓬莱文章建安骨，中间小谢又清发。</p><p>俱怀逸兴壮思飞，欲上青天览明月。</p><p>抽刀断水水更流，举杯消愁愁更愁。</p><p>人生在世不称意，明朝散发弄扁舟。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
