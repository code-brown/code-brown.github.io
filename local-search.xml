<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring WebSocket实现前后端分离在线聊天室应用</title>
    <link href="/2024/11/07/Spring%20WebSocket%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%BA%94%E7%94%A8/"/>
    <url>/2024/11/07/Spring%20WebSocket%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>WebSocket是一种协议，用于在Web应用程序和服务器之间建立实时、双向的通信连接。它通过一个单一的TCP连接提供了持久化连接，这使得Web应用程序可以更加实时地传递数据。</p><h3 id="WebSocket的优势："><a href="#WebSocket的优势：" class="headerlink" title="WebSocket的优势："></a>WebSocket的优势：</h3><ul><li><strong>实时性强</strong>：数据几乎实时传输，无需频繁轮询。</li><li><strong>效率高</strong>：减少了HTTP请求的开销，节省带宽。</li><li><strong>全双工通信</strong>：支持双向数据传输，客户端和服务器可以随时发送消息。</li></ul><h3 id="websocket-api的java实现"><a href="#websocket-api的java实现" class="headerlink" title="websocket-api的java实现:"></a>websocket-api的java实现:</h3><p>1.添加 WebSocket 相关依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.websocket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.websocket-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建一个 Java 类来处理 WebSocket 连接:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServerEndpoint(&quot;/chat&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;<br><br>    <span class="hljs-comment">//当客户端建立连接时调用</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;链接成功:&quot;</span>+session.getId());<br>    &#125;<br><br>    <span class="hljs-comment">//当客户端收到消息时调用</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message,Session session)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到消息:&quot;</span>+session.getId());<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-comment">//当客户端关闭连接时调用</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(Session session)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端关闭连接&quot;</span>+session.getId());<br>    &#125;<br><br>    <span class="hljs-comment">//发生异常时使用</span><br>    <span class="hljs-meta">@OnError</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Session session,Throwable throwable)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发送错误&quot;</span>+throwable.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>部署到支持websocket的容器中运行(如tomcat).</p><p>3.创建一个简单的 HTML 页面来连接 WebSocket 服务端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket Chat<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>WebSocket Chat<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messages&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageInput&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Type a message...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMessage()&quot;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;chat.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:8080/chat&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connected to the server&#x27;</span>);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> messagesDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messages&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">    message.<span class="hljs-property">textContent</span> = event.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">    messagesDiv.<span class="hljs-title function_">appendChild</span>(message);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Disconnected from the server&#x27;</span>);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">socket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> messageInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messageInput&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> message = messageInput.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (message) &#123;</span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">        messageInput.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当 WebSocket 连接成功建立时，前端页面会向服务器发送一条消息，并在收到服务器的响应时打印出消息内容。</p><h3 id="用Spring-Boot结合websocket-API实现"><a href="#用Spring-Boot结合websocket-API实现" class="headerlink" title="用Spring Boot结合websocket API实现:"></a>用Spring Boot结合websocket API实现:</h3><p>1.添加以下依赖：</p><ul><li>Spring Web</li><li>Spring WebSocket</li></ul><p>2.创建一个websocket配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry.addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatHandler</span>(), <span class="hljs-string">&quot;/chat&quot;</span>).setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Configuration：表示这是一个配置类，Spring 会扫描并加载这个类中的配置。<br>@EnableWebSocket：启用 WebSocket 支持。<br>WebSocketConfigurer：实现了 WebSocketConfigurer 接口，该接口提供了配置 WebSocket 的方法。<br>registerWebSocketHandlers：重写了 WebSocketConfigurer 接口中的 registerWebSocketHandlers 方法，用于注册 WebSocket 处理器。</p><p>这段代码配置了 WebSocket 支持，并注册了一个处理 &#x2F;chat 路径的 ChatHandler，同时允许所有来源的跨域请求。</p><h4 id="3-实现-WebSocket-Handler"><a href="#3-实现-WebSocket-Handler" class="headerlink" title="3. 实现 WebSocket Handler"></a>3. 实现 WebSocket Handler</h4><p><code>ChatHandler</code> 是处理 WebSocket 消息的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextWebSocketHandler</span> &#123;<br>    <span class="hljs-comment">// 保存所有会话</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;WebSocketSession&gt; sessions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 使用 WebSocketSession 而非 jakarta.websocket.Session</span><br><br>    <span class="hljs-comment">// 会话建立后，将当前会话添加到 sessions 列表中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        sessions.add(session);<br>    &#125;<br><br>    <span class="hljs-comment">// 将收到的消息广播给所有客户端</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (WebSocketSession webSocketSession : sessions) &#123;<br>            webSocketSession.sendMessage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(message.getPayload()));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 会话关闭</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        sessions.remove(session);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>ChatHandler</code> 是一个继承自 <code>TextWebSocketHandler</code> 的类，专门用于处理 WebSocket 连接的消息和事件。它负责管理客户端的连接、接收消息、并将消息广播给所有已连接的客户端。这个类实现了 WebSocket 通信的基础功能，如连接管理、消息处理和会话关闭处理。</p><ul><li><ul><li><h4 id="1-sessions-列表"><a href="#1-sessions-列表" class="headerlink" title="1. sessions 列表"></a>1. <code>sessions</code> 列表</h4><ul><li><strong>描述</strong>：这是一个 <code>List&lt;WebSocketSession&gt;</code>，用于保存所有当前活动的 WebSocket 会话。每当客户端建立 WebSocket 连接时，当前会话将被添加到这个列表中，当客户端断开连接时，会从这个列表中移除。它确保消息能够被广播到所有连接中的客户端。</li></ul><h4 id="2-afterConnectionEstablished-WebSocketSession-session"><a href="#2-afterConnectionEstablished-WebSocketSession-session" class="headerlink" title="2. afterConnectionEstablished(WebSocketSession session)"></a>2. <code>afterConnectionEstablished(WebSocketSession session)</code></h4><ul><li><strong>描述</strong>：当 WebSocket 连接建立时调用此方法。此时，服务器会将新连接的客户端会话对象 <code>session</code> 添加到 <code>sessions</code> 列表中。管理新连接的客户端会话，允许后续对所有已连接客户端的消息进行广播。</li></ul><h4 id="3-handleTextMessage-WebSocketSession-session-TextMessage-message"><a href="#3-handleTextMessage-WebSocketSession-session-TextMessage-message" class="headerlink" title="3. handleTextMessage(WebSocketSession session, TextMessage message)"></a>3. <code>handleTextMessage(WebSocketSession session, TextMessage message)</code></h4><ul><li><p><strong>描述</strong>：当服务器收到某个客户端发送的文本消息时触发该方法。方法参数中包含了发送消息的会话 <code>session</code> 和消息内容 <code>message</code>。</p><p>服务器会遍历 <code>sessions</code> 列表，并将接收到的消息广播给所有连接的客户端。此功能使所有客户端能够实时接收到其它客户端发送的消息。</p></li></ul><h4 id="4-afterConnectionClosed-WebSocketSession-session-CloseStatus-status"><a href="#4-afterConnectionClosed-WebSocketSession-session-CloseStatus-status" class="headerlink" title="4. afterConnectionClosed(WebSocketSession session, CloseStatus status)"></a>4. <code>afterConnectionClosed(WebSocketSession session, CloseStatus status)</code></h4><ul><li><strong>描述</strong>：当 WebSocket 连接关闭时调用此方法。此时，服务器会将关闭的客户端会话对象 <code>session</code> 从 <code>sessions</code> 列表中移除。清理已经断开的客户端连接，确保 <code>sessions</code> 列表中只包含当前活跃的 WebSocket 会话。</li></ul></li></ul></li></ul><p>4.创建一个简单的vue页面</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>在线聊天<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chat-window&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;msg in messages&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputMessage&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;sendMessage&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入消息...&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">socket</span>: <span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">inputMessage</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">messages</span>: []</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">connectWebSocket</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">connectWebSocket</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:8080/chat&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>.<span class="hljs-title function_">push</span>(event.<span class="hljs-property">data</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputMessage</span>.<span class="hljs-title function_">trim</span>() !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputMessage</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputMessage</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.chat-window</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow-y</span>: auto;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.message</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>访问页面可以看到:</p><p>![图片](img\屏幕截图 2024-11-28 164425.png)</p><p>试着在另一个窗口发送消息;</p><p>![图片](img\屏幕截图 2024-11-28 164512.png)</p><p>可以显示对应消息.</p><p>本文后端基于Spring WebSocket实现了简单的前后端分离在线聊天室应用,当然这只是一个基础的应用,距离完整还有距离,希望以后有机会完善.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Vue</tag>
      
      <tag>Websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring boot+Vue实现简单在线个人博客</title>
    <link href="/2024/11/01/Spring%20boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/11/01/Spring%20boot+Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>本文为Spring学习项目之一:</p><p>1.引入依赖,创建Vue项目</p><p>2.创建数据库</p><p>3.创建实体类和JPA接口</p><p>4.创建服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> PostRepository postRepository;<br><br>    <span class="hljs-comment">//查询所有blog</span><br>    <span class="hljs-keyword">public</span> List&lt;Post&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> postRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找blog</span><br>    <span class="hljs-keyword">public</span> Optional&lt;Post&gt; <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> postRepository.findById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//保存blog</span><br>    <span class="hljs-keyword">public</span> Post <span class="hljs-title function_">save</span><span class="hljs-params">(Post post)</span>&#123;<br>        <span class="hljs-keyword">return</span> postRepository.save(post);<br>    &#125;<br><br>    <span class="hljs-comment">//删除blog</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        postRepository.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/posts&quot;)</span><br><span class="hljs-meta">@CrossOrigin(origins = &quot;http://localhost:5173/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PostService postService;<br><br>    <span class="hljs-comment">// 获取所有文章</span><br>    <span class="hljs-meta">@GetMapping(&quot;/all&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Post&gt; <span class="hljs-title function_">getAllPosts</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> postService.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">// 根据ID获取文章</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Post&gt; <span class="hljs-title function_">getPostById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span> &#123;<br>        Optional&lt;Post&gt; post = postService.findById(id);<br>        <span class="hljs-keyword">return</span> post.map(ResponseEntity::ok)<br>                .orElseGet(() -&gt; ResponseEntity.notFound().build());<br>    &#125;<br><br>    <span class="hljs-comment">// 创建新文章</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Post <span class="hljs-title function_">createPost</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Post post)</span> &#123;<br>        post.setCreatedAt(java.time.LocalDateTime.now());<br>        <span class="hljs-keyword">return</span> postService.save(post);<br>    &#125;<br><br>    <span class="hljs-comment">// 更新现有文章</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Post&gt; <span class="hljs-title function_">updatePost</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id, <span class="hljs-meta">@RequestBody</span> Post postDetails)</span> &#123;<br>        Optional&lt;Post&gt; optionalPost = postService.findById(id);<br>        <span class="hljs-keyword">if</span> (optionalPost.isPresent()) &#123;<br>            <span class="hljs-type">Post</span> <span class="hljs-variable">post</span> <span class="hljs-operator">=</span> optionalPost.get();<br>            post.setTitle(postDetails.getTitle());<br>            post.setContent(postDetails.getContent());<br>            <span class="hljs-type">Post</span> <span class="hljs-variable">updatedPost</span> <span class="hljs-operator">=</span> postService.save(post);<br>            <span class="hljs-keyword">return</span> ResponseEntity.ok(updatedPost);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除文章</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deletePost</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span> &#123;<br>        Optional&lt;Post&gt; post = postService.findById(id);<br>        <span class="hljs-keyword">if</span> (post.isPresent()) &#123;<br>            postService.deleteById(id);<br>            <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.前端页面:</p><p>(1)博客主页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;我的博客&lt;/h1&gt;<br>  &lt;router-link to=&quot;/create&quot;&gt;创建新文章&lt;/router-link&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;post in posts&quot; :key=&quot;post.id&quot;&gt;<br>        &lt;router-link :to=&quot;`/posts/$&#123;post.id&#125;`&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/router-link&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;;<br><br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            posts: [],<br>        &#125;;<br>    &#125;,<br>    created() &#123;<br>        axios.get(&#x27;http://localhost:8080/api/posts/all&#x27;).then(response =&gt; &#123;<br>            this.posts = response.data;<br>        &#125;);<br>    &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>(2)创建博客页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt; <br>    &lt;div&gt; <br>      &lt;h1&gt;创建新文章&lt;/h1&gt; <br>      &lt;form @submit.prevent=&quot;createPost&quot;&gt; <br>        &lt;div&gt; <br>          &lt;label for=&quot;title&quot;&gt;标题：&lt;/label&gt; <br>          &lt;input type=&quot;text&quot; v-model=&quot;post.title&quot; required /&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>          &lt;label for=&quot;content&quot;&gt;内容：&lt;/label&gt;<br>          &lt;textarea v-model=&quot;post.content&quot; required&gt;&lt;/textarea&gt;<br>        &lt;/div&gt;<br>        &lt;button type=&quot;submit&quot;&gt;发布&lt;/button&gt;<br>      &lt;/form&gt; <br>    &lt;/div&gt; <br>  &lt;/template&gt; <br>  <br>  &lt;script&gt;<br>  import axios from &#x27;axios&#x27;;<br>  <br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        post: &#123;<br>          title: &#x27;&#x27;,<br>          content: &#x27;&#x27;,<br>        &#125;,<br>      &#125;;<br>    &#125;,<br>    methods: &#123; <br>      createPost() &#123; <br>        console.log(this.post); // 检查 post 是否定义 <br>        axios.post(&#x27;http://localhost:8080/api/posts&#x27;, this.post)<br>          .then(() =&gt; &#123;<br>            this.$router.push(&#x27;/&#x27;);<br>          &#125;)<br>          .catch(error =&gt; &#123; <br>            console.error(&quot;发布文章失败:&quot;, error); <br>          &#125;); <br>      &#125;, <br>    &#125;, <br>  &#125;<br>  &lt;/script&gt;<br>  <br></code></pre></td></tr></table></figure><p>(3)博客详情页面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>      &lt;h1&gt;&#123;&#123; post.title &#125;&#125;&lt;/h1&gt;<br>      &lt;p&gt;&#123;&#123; post.content &#125;&#125;&lt;/p&gt;<br>      &lt;router-link to=&quot;/&quot;&gt;返回首页&lt;/router-link&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>  <br>  &lt;script&gt;<br><br>import axios from &quot;axios&quot;;<br><br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        post: &#123;&#125;,<br>      &#125;;<br>    &#125;,<br>    created() &#123;<br>      const id = this.$route.params.id;<br>      axios.get(`http://localhost:8080/api/posts/$&#123;id&#125;`)<br>        .then(response =&gt; &#123;<br>          this.post = response.data;<br>        &#125;)<br>        .catch(error =&gt; &#123;<br>          console.error(&quot;获取文章详情失败:&quot;, error);<br>        &#125;);<br>    &#125;,<br>  &#125;;<br>  &lt;/script&gt;<br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring boot+Mybatis实现前后端分离CRUD操作</title>
    <link href="/2024/10/28/Spring-boot+Mybatis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BBCRUD%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/10/28/Spring-boot+Mybatis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BBCRUD%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>持久层框架个人更倾向于使用JPA,但考虑到Mybatis国内使用的广泛性,以此篇文章记录Spring boot+Mybatis实现前后端分离CRUD操作的学习过程,旨在熟悉Mybatis持久层的使用.</p><p>1.引入相关依赖</p><ul><li>Spring Web</li><li>MyBatis Framework</li><li>MySQL Driver</li><li>Lombok (可选)</li></ul><p>2.配置 application.properties<br>在 src&#x2F;main&#x2F;resources 目录下创建或编辑 application.properties 文件，配置数据库连接信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/your_database?useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">your_username</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">your_password</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><p>3.创建User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> verified;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> phone;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.创建UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//查询所有用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from users&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查询用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from users where id = #&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//添加用户</span><br>    <span class="hljs-meta">@Insert(&quot;insert into users (id, name, birthday, address, verified, phone) VALUES (#&#123;id&#125;,#&#123;name&#125;,#&#123;birthday&#125;,#&#123;address&#125;,#&#123;verified&#125;,#&#123;phone&#125;)&quot;)</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//更新用户</span><br>    <span class="hljs-meta">@Update(&quot;update users set name = #&#123;name&#125;,birthday = #&#123;birthday&#125;,address = #&#123;address&#125;,verified = #&#123;vierfied&#125;,phone = #&#123;phone&#125; where id = #&#123;id&#125; &quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-meta">@Delete(&quot;delete from users where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">//查询所有用户</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">//根据ID查询</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.findById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.insertUser(user);<br>    &#125;<br><br>    <span class="hljs-comment">//更新用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.updateUser(user);<br>    &#125;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.deleteUser(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.创建Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(origins = &quot;http://localhost:5173/&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/all&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.findAll();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.findById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.insertUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping(&quot;/update&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.updateUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.deleteUser(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.创建 MyBatis XML 映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectAllColumns&quot;</span>/&gt;</span><br>        FROM user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectAllColumns&quot;</span>/&gt;</span><br>        FROM user WHERE id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        INSERT INTO user(name, email, birthday, address, gender) VALUES(#&#123;name&#125;, #&#123;email&#125;, #&#123;birthday&#125;, #&#123;address&#125;, #&#123;gender&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.scitc.com.springmybatisapi.entity.User&quot;</span>&gt;</span><br>        UPDATE user SET name = #&#123;name&#125;, email = #&#123;email&#125;, birthday = #&#123;birthday&#125;, address = #&#123;address&#125;, gender = #&#123;gender&#125; WHERE id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span>&gt;</span><br>        DELETE FROM user WHERE id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllColumns&quot;</span>&gt;</span><br>        SELECT id, name, email, birthday, address, gender<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>8.完成前端页面</p><template>  <h1>用户管理</h1>  <div class="users">    <ul>      <li v-for="user in users" :key="user.id">        <div v-if="!user.isEditing">          {{ user.name }} {{ user.age }}岁 {{ user.address }} {{ user.phone }} {{ user.verified ? '已验证' : '未验证' }}          <button @click="edit(user)">编辑</button>          <button @click="edit(user)">编辑</button>          <button @click="deleteUser(user.id)">删除</button>        </div>        <div v-else>          <input v-model="user.name" />          <input type="date" v-model="user.birthday" @change="calculateAge(user)" /> <!-- 使用日期输入 -->          <input v-model="user.address" />          <input v-model="user.phone" />          <input type="checkbox" v-model="user.verified" /> 已验证          <button @click="updateUser(user)">保存</button>          <button @click="cancelEdit(user)">取消</button>        </div>      </li>    </ul>    <form @submit.prevent="addUser">      <input type="text" placeholder="姓名" v-model="newUser.name" required>      <input type="date" v-model="newUser.birthday" @change="calculateAge(newUser)" required /> <!-- 使用日期输入 -->      <input type="text" placeholder="地址" v-model="newUser.address" required>      <input type="text" placeholder="手机号" v-model="newUser.phone" required>      <input type="checkbox" v-model="newUser.verified" /> 是否已验证      <button type="submit">添加</button>    </form>  </div></template><script>import axios from 'axios'```javascriptexport default {  data() {    return {      users: [],      newUser: {        name: '',        birthday: '', // 改为birthday        age: '',        address: '',        phone: '',        verified: false      }    }  },  methods: {    fetchUsers() {      axios.get("http://localhost:8080/api/users/all")        .then(response => {          this.users = response.data.map(user => {            user.age = this.calculateAgeFromBirthday(user.birthday); // 添加age计算            return { ...user, isEditing: false };          });        })        .catch(error => {          console.error('获取用户数据失败', error);        });    },    addUser() {      axios.post("http://localhost:8080/api/users/insert", this.newUser)        .then(response => {          response.data.age = this.calculateAgeFromBirthday(response.data.birthday); // 计算新用户的年龄          this.users.push({ ...response.data, isEditing: false });          this.resetNewUser();        })        .catch(error => {          console.error('添加用户失败', error);        });    },    edit(user) {      user.isEditing = true; // 进入编辑模式    },    updateUser(user) {      axios.put(`http://localhost:8080/api/users/update/${user.id}`, user)        .then(response => {          user.isEditing = false; // 退出编辑模式          Object.assign(user, response.data); // 更新用户信息          user.age = this.calculateAgeFromBirthday(user.birthday); // 更新年龄        })        .catch(error => {          console.error('更新用户失败', error);        });    },    cancelEdit(user) {      user.isEditing = false; // 取消编辑    },    deleteUser(userId) {      axios.delete(`http://localhost:8080/api/users/delete/${userId}`)        .then(response => {          this.users = this.users.filter(user => user.id !== userId);        })        .catch(error => {          console.error('删除用户失败', error);        });    },    resetNewUser() {      this.newUser = {        name: '',        birthday: '',        age: '',        address: '',        phone: '',        verified: false      };    },    calculateAgeFromBirthday(birthday) {      const birthDate = new Date(birthday);      const ageDiff = Date.now() - birthDate.getTime();      const ageDate = new Date(ageDiff);      return Math.abs(ageDate.getUTCFullYear() - 1970); // 返回年龄    },    calculateAge(user) {      user.age = this.calculateAgeFromBirthday(user.birthday);    }  },  mounted() {    this.fetchUsers();  }}</scrip>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg 教程（Windows 版）</title>
    <link href="/2024/10/27/FFmpeg-%E6%95%99%E7%A8%8B%EF%BC%88Windows-%E7%89%88%EF%BC%89/"/>
    <url>/2024/10/27/FFmpeg-%E6%95%99%E7%A8%8B%EF%BC%88Windows-%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="FFmpeg-教程（Windows-版）"><a href="#FFmpeg-教程（Windows-版）" class="headerlink" title="FFmpeg 教程（Windows 版）"></a>FFmpeg 教程（Windows 版）</h1><p>FFmpeg 是一个开源的多媒体框架，用于处理音视频文件，包括转码、剪辑、合并、分割等功能。本文将为您介绍如何在 Windows 操作系统上安装和使用 FFmpeg。</p><hr><h2 id="FFmpeg-简介"><a href="#FFmpeg-简介" class="headerlink" title="FFmpeg 简介"></a>FFmpeg 简介</h2><p>FFmpeg 是一个免费的开源项目，包含了一套用于处理音视频数据的工具和库。它支持几乎所有已知的音视频格式，并且可以执行多种复杂的操作，如转码、转封装、流媒体处理等。由于其强大的功能和灵活性，FFmpeg 被广泛应用于各种多媒体项目中。</p><h2 id="下载-FFmpeg"><a href="#下载-FFmpeg" class="headerlink" title="下载 FFmpeg"></a>下载 FFmpeg</h2><ol><li><strong>访问官方网站</strong>：前往 FFmpeg 的官方网站 <a href="https://ffmpeg.org/download.html%E3%80%82">https://ffmpeg.org/download.html。</a></li><li><strong>选择 Windows 版本</strong>：在“Get packages &amp; executable files”部分，点击 Windows 的图标，进入 Windows 版本的下载页面。</li><li><strong>选择预编译版本</strong>：推荐使用 Gyan.dev 或 <a href="https://github.com/BtbN/FFmpeg-Builds/releases">BtbN</a> 提供的预编译版本。</li><li><strong>下载压缩包</strong>：选择适合您系统的版本（通常为 <code>ffmpeg-release-essentials.zip</code> 或类似名称的文件），点击下载。</li></ol><h2 id="安装-FFmpeg"><a href="#安装-FFmpeg" class="headerlink" title="安装 FFmpeg"></a>安装 FFmpeg</h2><ol><li><p><strong>解压压缩包</strong>：将下载的压缩包解压到您希望安装 FFmpeg 的目录，例如 <code>C:\ffmpeg</code>。</p></li><li><p><strong>文件结构</strong>：解压后，您应该看到类似以下的文件夹结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">makefile复制代码C:\ffmpeg<br>├── bin<br>│   ├── ffmpeg<span class="hljs-selector-class">.exe</span><br>│   ├── ffplay<span class="hljs-selector-class">.exe</span><br>│   └── ffprobe<span class="hljs-selector-class">.exe</span><br>├── docs<br>└── ...（其他文件夹）<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了在命令提示符（CMD）或 PowerShell 中随时使用 FFmpeg 命令，建议将 FFmpeg 的 <code>bin</code> 目录添加到系统的环境变量中。</p><ol><li><p><strong>打开环境变量设置</strong>：</p><ul><li>右键点击“此电脑”或“我的电脑”，选择“属性”。</li><li>点击左侧的“高级系统设置”。</li><li>在“系统属性”窗口中，点击“环境变量”按钮。</li></ul></li><li><p><strong>编辑 PATH 变量</strong>：</p><ul><li>在“系统变量”区域，找到并选中 <code>Path</code>，然后点击“编辑”。</li><li>点击“新建”，然后输入 FFmpeg 的 <code>bin</code> 目录路径，例如 <code>C:\ffmpeg\bin</code>。</li><li>确认所有窗口以保存设置。</li></ul></li><li><p><strong>验证安装</strong>：</p><ul><li><p>打开命令提示符（CMD）或 PowerShell。</p></li><li><p>输入以下命令并回车：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffmpeg -version<br></code></pre></td></tr></table></figure></li><li><p>如果安装成功，您将看到 FFmpeg 的版本信息。<img src="C:\Users\26578\AppData\Roaming\Typora\typora-user-images\image-20241027205527078.png" alt="image-20241027205527078"></p></li></ul></li></ol><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>以下是一些常用的 FFmpeg 命令示例，帮助您快速上手.</p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -version<br></code></pre></td></tr></table></figure><h3 id="视频格式转换"><a href="#视频格式转换" class="headerlink" title="视频格式转换"></a>视频格式转换</h3><p>将一个视频文件从一种格式转换为另一种格式。例如，将 <code>input.mp4</code> 转换为 <code>output.avi</code>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffmpeg -i input.mp4 output.avi<br></code></pre></td></tr></table></figure><h3 id="提取音频"><a href="#提取音频" class="headerlink" title="提取音频"></a>提取音频</h3><p>从视频文件中提取音频，保存为 MP3 格式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">q</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span> -map <span class="hljs-selector-tag">a</span> output.mp3<br></code></pre></td></tr></table></figure><h3 id="视频剪辑"><a href="#视频剪辑" class="headerlink" title="视频剪辑"></a>视频剪辑</h3><p>剪切视频的一部分。例如，截取 <code>input.mp4</code> 从第 00:01:00 到第 00:02:00 的部分：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -ss <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span> -i input.mp4 -to <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span> -c copy output.mp4<br></code></pre></td></tr></table></figure><h3 id="合并视频文件"><a href="#合并视频文件" class="headerlink" title="合并视频文件"></a>合并视频文件</h3><p>将多个视频文件合并为一个。首先，创建一个文本文件 <code>filelist.txt</code>，内容如下：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video1.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video2.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video3.mp4&#x27;</span><br></code></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ffmpeg -f <span class="hljs-built_in">concat</span> -safe <span class="hljs-number">0</span> -i filelist.txt -c copy <span class="hljs-built_in">output</span>.mp4<br></code></pre></td></tr></table></figure><h3 id="转换视频编码"><a href="#转换视频编码" class="headerlink" title="转换视频编码"></a>转换视频编码</h3><p>将视频编码转换为 H.264 编码，音频编码为 AAC：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mkv</span> -c:v libx264 -c:<span class="hljs-selector-tag">a</span> aac output.mp4<br></code></pre></td></tr></table></figure><h3 id="调整视频分辨率"><a href="#调整视频分辨率" class="headerlink" title="调整视频分辨率"></a>调整视频分辨率</h3><p>将视频分辨率调整为 1280x720：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i input.mp4 -vf scale=<span class="hljs-number">1280</span>:<span class="hljs-number">720</span> output.mp4<br></code></pre></td></tr></table></figure><h3 id="压缩视频文件大小"><a href="#压缩视频文件大小" class="headerlink" title="压缩视频文件大小"></a>压缩视频文件大小</h3><p>通过调整比特率来压缩视频文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">b</span>:v <span class="hljs-number">1000</span>k -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">128</span>k output.mp4<br></code></pre></td></tr></table></figure><h3 id="添加字幕"><a href="#添加字幕" class="headerlink" title="添加字幕"></a>添加字幕</h3><p>将外部字幕文件（如 SRT）嵌入到视频中：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> subtitles<span class="hljs-selector-class">.srt</span> -c copy -c:s mov_text output.mp4<br></code></pre></td></tr></table></figure><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制全屏视频，保存为 <code>output.mp4</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -f gdigrab -framerate <span class="hljs-number">30</span> -i desktop output.mp4<br></code></pre></td></tr></table></figure><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>FFmpeg 具有极其丰富的功能，以下是一些高级应用场景：</p><h3 id="流媒体推流"><a href="#流媒体推流" class="headerlink" title="流媒体推流"></a>流媒体推流</h3><p>将视频流推送到 RTMP 服务器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bash<br><br><br>复制代码<br>ffmpeg -re -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -preset veryfast -maxrate <span class="hljs-number">3000</span>k -bufsize <span class="hljs-number">6000</span>k -c:<span class="hljs-selector-tag">a</span> aac -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">160</span>k -f flv rtmp:<span class="hljs-comment">//yourserver/live/stream</span><br></code></pre></td></tr></table></figure><h3 id="视频水印"><a href="#视频水印" class="headerlink" title="视频水印"></a>视频水印</h3><p>在视频上添加图片水印：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bash<br><br><br>复制代码<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> watermark<span class="hljs-selector-class">.png</span> -filter_complex <span class="hljs-string">&quot;overlay=10:10&quot;</span> output.mp4<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ffmpeg.org/documentation.html">FFmpeg 官方文档</a></li><li><a href="https://ffmpeg.org.cn/">FFmpeg 中文网</a></li><li><a href="https://www.ffmpeg.org/ffmpeg.html">FFmpeg 命令大全</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2安装docker和配置docker compose并编排服务</title>
    <link href="/2024/10/27/WSL2%E5%AE%89%E8%A3%85docker%E5%92%8C%E9%85%8D%E7%BD%AEdocker-compose%E5%B9%B6%E7%BC%96%E6%8E%92%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/10/27/WSL2%E5%AE%89%E8%A3%85docker%E5%92%8C%E9%85%8D%E7%BD%AEdocker-compose%E5%B9%B6%E7%BC%96%E6%8E%92%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在WSL2下安装Docker和Docker Compose并创建一个 docker-compose.yml 文件来编排 MySQL、Redis 和 MongoDB 服务的步骤如下：</p><ol><li>安装Docker<br>首先在WSL2镜像上安装Docker：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io -y<br></code></pre></td></tr></table></figure><ol start="2"><li>安装Docker Compose<br>Docker Compose 是一个帮助你定义和运行多容器Docker应用的工具，使用以下命令来安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>然后，给予它执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>验证安装成功：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建docker-compose.yml文件<br>现在创建一个docker-compose.yml文件，将 MySQL、Redis 和 MongoDB 定义为服务，并将它们的数据目录映射到宿主机上。</li></ol><p>在你喜欢的目录中创建 docker-compose.yml 文件然后编辑文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-container</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">rootpassword</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">mydb</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">user</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">ports:</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>     <span class="hljs-attr">lumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql_data:/var/lib/mysql</span><br>          <span class="hljs-attr">tworks:</span><br>             <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-container</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis_data:/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br>  <span class="hljs-attr">mongo:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo-container</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;27017:27017&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongo_data:/data/db</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">backend:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br><br></code></pre></td></tr></table></figure><p>4.启动服务<br>保存并退出编辑器，然后运行以下命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>这将启动 MySQL、Redis 和 MongoDB 三个容器，并使它们在后台运行。</p><ol start="5"><li>登录到 MySQL、Redis 和 MongoDB<br>现在，分别登录到这些服务中。</li></ol><p>登录到MySQL：<br>使用以下命令连接到 MySQL 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql-container mysql -u root -p<br></code></pre></td></tr></table></figure><p>你将会提示输入密码，输入你在 docker-compose.yml 文件中设置的 MYSQL_ROOT_PASSWORD (rootpassword)。</p><p>登录到Redis：<br>使用以下命令连接到 Redis 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-container redis-cli<br></code></pre></td></tr></table></figure><p>登录到MongoDB：<br>使用以下命令连接到 Mongo 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongo-container mongo<br></code></pre></td></tr></table></figure><ol start="6"><li>检查数据持久化<br>服务的数据将映射到宿主机的目录中（.&#x2F;mysql_data、.&#x2F;redis_data 和 .&#x2F;mongo_data），可以通过这些文件夹查看服务的持久化数据。</li></ol><p>总结<br>你现在已经在WSL2系统中安装了Docker和Docker Compose，并使用 docker-compose.yml 文件编排 MySQL、Redis 和 MongoDB 服务。服务启动后，可以通过 docker exec 命令登录到每个服务中，数据也被映射到宿主机的目录，确保数据持久化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>wsl windos docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JJWT 0.12.6更新学习</title>
    <link href="/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>最近学习JWT时遇到许多方法显示已弃用,JWT更新速度非常快,网上的教程和AI回复大多缺乏时效性,因此我记录下更新学习的过程;本文参考JWT GitHub首页:</p><p><a href="https://github.com/jwtk/jjwt?tab=readme-ov-file">https://github.com/jwtk/jjwt?tab=readme-ov-file</a></p><p>;并感谢ChatGPT提供了详尽的解释.</p><p>JWT基础知识:</p><p><strong>JWT (JSON Web Token)</strong>:** 是一种基于JSON的令牌，用于在网络应用中安全地传输信息。它通常用于身份验证和授权。JWT由三部分组成：<code>Header</code>、<code>Payload</code> 和 <code>Signature</code>，通过点号（<code>.</code>）分隔。JWT可以确保数据的完整性（不可篡改）并通过加密保证敏感信息的安全。</p><table><thead><tr><th align="left"><strong>部分</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>Header</strong></td><td>定义了JWT的元数据，主要包括签名算法和令牌类型。</td><td><code>json&lt;br&gt;&#123; &quot;alg&quot;: &quot;HS256&quot;,&lt;br&gt; &quot;typ&quot;: &quot;JWT&quot;&#125;</code></td></tr><tr><td align="left"><strong>Payload</strong></td><td>包含实际传递的数据（声明），可以包括注册声明、公共声明和私有声明。</td><td><code>json&#123; &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;,&quot;admin&quot;: true, &quot;exp&quot;: 1516239022&lt;br&gt;&#125;</code></td></tr><tr><td align="left"><strong>Signature</strong></td><td>用于验证JWT的完整性和真实性，通过对Header和Payload进行签名生成。</td><td><code>HMACSHA256(base64UrlEncode(Header) + &quot;.&quot; + base64UrlEncode(Payload), secret)</code></td></tr></tbody></table><p><strong>JJWT(Java JWT)</strong>:** 是一个Java库，用于创建和验证JWT（JSON Web Token）。它简化了在Java应用中使用JWT的过程。JJWT由一个开源社区开发，支持生成、解析和验证JWT的功能。本文学习的是最新的JJWT。</p><p><strong>JWS(JSON Web Signature):</strong> 是一种用来生成和验证数字签名的标准，基于JSON格式。JWS确保了数据的完整性和真实性。JWT的签名部分实际上就是使用了JWS。</p><p><strong>JWE(JSON Web Encryption)</strong>: 是一种用来加密数据的标准，也基于JSON格式。JWE与JWS不同之处在于，JWS保证数据的完整性（数据不可篡改），而JWE确保数据的机密性（数据加密后不可被读取）。</p><p>1.引入依赖</p><p>引入JWT最新的maven依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson <span class="hljs-keyword">if</span> Gson is preferred --&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2.生成JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生成一个HS256算法的密钥</span><br><span class="hljs-type">SecretKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Jwts.SIG.HS256.key().build();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">jws</span> <span class="hljs-operator">=</span> Jwts.builder()<br>           <span class="hljs-comment">// 设置JWT的主体部分，通常包含用户标识</span><br>           .subject(<span class="hljs-string">&quot;sub&quot;</span>) <br>           <br>           <span class="hljs-comment">// 添加自定义声明</span><br>           .claim(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>)<br>           <br>           <span class="hljs-comment">// 生成的密钥对JWT进行签名</span><br>           .signWith(key)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行者信息</span><br>           .issuer(<span class="hljs-string">&quot;example.com&quot;</span>)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行时间</span><br>           .issuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>           <br>           <span class="hljs-comment">// 设置JWT的过期时间，这里设置为当前时间加1小时</span><br>           .expiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">3600000</span>))<br>           <br>           <span class="hljs-comment">//生成最终的JWT字符串</span><br>           .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.解析JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Jws&lt;Claims&gt; claimsJws = Jwts.parser()<br>        <span class="hljs-comment">// 使用指定的密钥验证JWT的签名</span><br>        .verifyWith(key)<br>        .build()<br>        <span class="hljs-comment">// 解析JWT并验证其签名，返回包含claims的Jws对象</span><br>        .parseSignedClaims(jws);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java Spring JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring  Vue3实现ToDoList待办事项列表</title>
    <link href="/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/"/>
    <url>/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>为了熟悉spring,练习TodoList的实例,以本文记录学习过程:</p><p>1.添加相关依赖:本项目使用的是spring boot+vue3 数据库使用MySQL,持久层使用JPA</p><p>后端Api</p><p>2.建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table todo(id int auto_increment primary key ,<br>                title varchar(50) ,<br>                description varchar(100),<br>                completed boolean default false,<br>                created_at TIMESTAMP default CURRENT_TIMESTAMP);<br></code></pre></td></tr></table></figure><p>3.application.properties配置数据库连接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/todolist</span><br></code></pre></td></tr></table></figure><p>4.创建实体类Todo并使用JPA注解映射数据库表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;todo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> completed;<br><br>    <span class="hljs-meta">@Temporal(TemporalType.TIMESTAMP)</span> <span class="hljs-comment">//指定create_at字段为时间戳类型</span><br>    <span class="hljs-keyword">private</span> Date create_at;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">TodoRepository</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">Todo</span>,<span class="hljs-symbol">Integer</span>&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.完成TodoService,实现对Todo的操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-title class_">TodoRepository</span> todoRepository;<br>    <span class="hljs-title class_">Todo</span> todo;<br><br>    <span class="hljs-comment">//列出所有Todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findAllTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> todoRepository.<span class="hljs-title function_">findAll</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">finTodoById</span>(<span class="hljs-params">int id</span>)&#123; <span class="hljs-comment">//使用Optional包装,避免返回null</span><br>        <span class="hljs-keyword">return</span> todoRepository.<span class="hljs-title function_">findById</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Todo</span> newTodo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Todo</span>();<br>        <span class="hljs-keyword">return</span> newTodo;<br>    &#125;<br><br>    <span class="hljs-comment">//修改todo</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"><span class="hljs-title class_">Todo</span> todo, <span class="hljs-title class_">String</span> title, <span class="hljs-title class_">String</span> description, <span class="hljs-built_in">boolean</span> completed</span>) &#123;<br>        todo.<span class="hljs-title function_">setTitle</span>(title);<br>        todo.<span class="hljs-title function_">setDescription</span>(description);<br>        todo.<span class="hljs-title function_">setCompleted</span>(completed);<br>    &#125;<br><br>    <span class="hljs-comment">//删除todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">int id</span>)&#123;<br>        <span class="hljs-keyword">if</span> (todoRepository.<span class="hljs-title function_">findById</span>(id).<span class="hljs-title function_">isPresent</span>())&#123;<br>            todoRepository.<span class="hljs-title function_">deleteById</span>(id);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>5.完成TodoController,调用服务层方法,实现后端接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/todo&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-title class_">TodoService</span> todoService;<br>    <span class="hljs-title class_">Todo</span> todo;<br><br>    <span class="hljs-comment">//列出所有Todo</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findAllTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">findAllTodo</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找Todo</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findTodoById</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id</span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">finTodoById</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加Todo</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> <span class="hljs-title class_">Todo</span> newTodo</span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">addTodo</span>(newTodo);<br>    &#125;<br><br>    <span class="hljs-comment">//删除Todo</span><br>    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id</span>)&#123;<br>       todoService.<span class="hljs-title function_">deleteTodo</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//修改Todo</span><br>    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id,<span class="hljs-meta">@RequestBody</span> <span class="hljs-title class_">Todo</span> updatetodo</span>) &#123;<br>        todoService.<span class="hljs-title function_">updateTodo</span>(todo,updatetodo.<span class="hljs-title function_">getTitle</span>(), updatetodo.<span class="hljs-title function_">getDescription</span>(), updatetodo.<span class="hljs-title function_">isCompleted</span>());<br>        <span class="hljs-keyword">return</span> todo;<br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>前端页面</p><template>   <div class="todo-list">     <h1>待办事项</h1>     <form @submit.prevent="addTodo">       <input v-model="newTodo.title" placeholder="标题" required />       <input v-model="newTodo.description" placeholder="描述" />       <button type="submit">添加</button>     </form>     <ul>       <li v-for="todo in todos" :key="todo.id">         <span :class="{ completed: todo.completed }">            -          </span>         <button @click="toggleComplete(todo)">完成</button>         <button @click="deleteTodo(todo.id)">删除</button>       </li>     </ul>   </div></template><script> import axios from 'axios';<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">todos</span>: [],<br>       <span class="hljs-attr">newTodo</span>: &#123;<br>         <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>         <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>         <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>       &#125;<br>     &#125;;<br>   &#125;,<br>   <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 移到根对象</span><br>     <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fetchTodos</span>();<br>   &#125;,<br>   <span class="hljs-attr">methods</span>: &#123;<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetchTodos</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/todo/all&#x27;</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = response.<span class="hljs-property">data</span>;<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/todo&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">push</span>(response.<span class="hljs-property">data</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span> = &#123;<br>           <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>         &#125;;<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">toggleComplete</span>(<span class="hljs-params">todo</span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> updatedTodo = &#123; ...todo, <span class="hljs-attr">completed</span>: !todo.<span class="hljs-property">completed</span> &#125;;<br>         <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">put</span>(<span class="hljs-string">`http://localhost:8080/api/todo/<span class="hljs-subst">$&#123;todo.id&#125;</span>`</span>, updatedTodo);<br>         <span class="hljs-keyword">const</span> insex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">indexOf</span>(todo);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">splice</span>(insex, <span class="hljs-number">1</span>, updatedTodo); <span class="hljs-comment">// 使用正确的变量名</span><br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">id</span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`http://localhost:8080/api/todo/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== id);<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></script><style scoped>#app { height: 90vh; display: flex; align-items: center; justify-content: center;}</style>]]></content>
    
    
    
    <tags>
      
      <tag>java, spring, vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/10/23/test/"/>
    <url>/2024/10/23/test/</url>
    
    <content type="html"><![CDATA[<p>宣州谢朓楼饯别校书叔云</p><p>李白</p><p>弃我去者，昨日之日不可留;乱我心者，今日之日多烦忧。</p><p>长风万里送秋雁，对此可以酣高楼。</p><p>蓬莱文章建安骨，中间小谢又清发。</p><p>俱怀逸兴壮思飞，欲上青天览明月。</p><p>抽刀断水水更流，举杯消愁愁更愁。</p><p>人生在世不称意，明朝散发弄扁舟。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
