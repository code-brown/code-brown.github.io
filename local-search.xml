<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FFmpeg 教程（Windows 版）</title>
    <link href="/2024/10/27/FFmpeg-%E6%95%99%E7%A8%8B%EF%BC%88Windows-%E7%89%88%EF%BC%89/"/>
    <url>/2024/10/27/FFmpeg-%E6%95%99%E7%A8%8B%EF%BC%88Windows-%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="FFmpeg-教程（Windows-版）"><a href="#FFmpeg-教程（Windows-版）" class="headerlink" title="FFmpeg 教程（Windows 版）"></a>FFmpeg 教程（Windows 版）</h1><p>FFmpeg 是一个开源的多媒体框架，用于处理音视频文件，包括转码、剪辑、合并、分割等功能。本文将为您介绍如何在 Windows 操作系统上安装和使用 FFmpeg。</p><hr><h2 id="FFmpeg-简介"><a href="#FFmpeg-简介" class="headerlink" title="FFmpeg 简介"></a>FFmpeg 简介</h2><p>FFmpeg 是一个免费的开源项目，包含了一套用于处理音视频数据的工具和库。它支持几乎所有已知的音视频格式，并且可以执行多种复杂的操作，如转码、转封装、流媒体处理等。由于其强大的功能和灵活性，FFmpeg 被广泛应用于各种多媒体项目中。</p><h2 id="下载-FFmpeg"><a href="#下载-FFmpeg" class="headerlink" title="下载 FFmpeg"></a>下载 FFmpeg</h2><ol><li><strong>访问官方网站</strong>：前往 FFmpeg 的官方网站 <a href="https://ffmpeg.org/download.html%E3%80%82">https://ffmpeg.org/download.html。</a></li><li><strong>选择 Windows 版本</strong>：在“Get packages &amp; executable files”部分，点击 Windows 的图标，进入 Windows 版本的下载页面。</li><li><strong>选择预编译版本</strong>：推荐使用 Gyan.dev 或 <a href="https://github.com/BtbN/FFmpeg-Builds/releases">BtbN</a> 提供的预编译版本。</li><li><strong>下载压缩包</strong>：选择适合您系统的版本（通常为 <code>ffmpeg-release-essentials.zip</code> 或类似名称的文件），点击下载。</li></ol><h2 id="安装-FFmpeg"><a href="#安装-FFmpeg" class="headerlink" title="安装 FFmpeg"></a>安装 FFmpeg</h2><ol><li><p><strong>解压压缩包</strong>：将下载的压缩包解压到您希望安装 FFmpeg 的目录，例如 <code>C:\ffmpeg</code>。</p></li><li><p><strong>文件结构</strong>：解压后，您应该看到类似以下的文件夹结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">makefile复制代码C:\ffmpeg<br>├── bin<br>│   ├── ffmpeg<span class="hljs-selector-class">.exe</span><br>│   ├── ffplay<span class="hljs-selector-class">.exe</span><br>│   └── ffprobe<span class="hljs-selector-class">.exe</span><br>├── docs<br>└── ...（其他文件夹）<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了在命令提示符（CMD）或 PowerShell 中随时使用 FFmpeg 命令，建议将 FFmpeg 的 <code>bin</code> 目录添加到系统的环境变量中。</p><ol><li><p><strong>打开环境变量设置</strong>：</p><ul><li>右键点击“此电脑”或“我的电脑”，选择“属性”。</li><li>点击左侧的“高级系统设置”。</li><li>在“系统属性”窗口中，点击“环境变量”按钮。</li></ul></li><li><p><strong>编辑 PATH 变量</strong>：</p><ul><li>在“系统变量”区域，找到并选中 <code>Path</code>，然后点击“编辑”。</li><li>点击“新建”，然后输入 FFmpeg 的 <code>bin</code> 目录路径，例如 <code>C:\ffmpeg\bin</code>。</li><li>确认所有窗口以保存设置。</li></ul></li><li><p><strong>验证安装</strong>：</p><ul><li><p>打开命令提示符（CMD）或 PowerShell。</p></li><li><p>输入以下命令并回车：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffmpeg -version<br></code></pre></td></tr></table></figure></li><li><p>如果安装成功，您将看到 FFmpeg 的版本信息。<img src="C:\Users\26578\AppData\Roaming\Typora\typora-user-images\image-20241027205527078.png" alt="image-20241027205527078"></p></li></ul></li></ol><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>以下是一些常用的 FFmpeg 命令示例，帮助您快速上手.</p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -version<br></code></pre></td></tr></table></figure><h3 id="视频格式转换"><a href="#视频格式转换" class="headerlink" title="视频格式转换"></a>视频格式转换</h3><p>将一个视频文件从一种格式转换为另一种格式。例如，将 <code>input.mp4</code> 转换为 <code>output.avi</code>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffmpeg -i input.mp4 output.avi<br></code></pre></td></tr></table></figure><h3 id="提取音频"><a href="#提取音频" class="headerlink" title="提取音频"></a>提取音频</h3><p>从视频文件中提取音频，保存为 MP3 格式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">q</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span> -map <span class="hljs-selector-tag">a</span> output.mp3<br></code></pre></td></tr></table></figure><h3 id="视频剪辑"><a href="#视频剪辑" class="headerlink" title="视频剪辑"></a>视频剪辑</h3><p>剪切视频的一部分。例如，截取 <code>input.mp4</code> 从第 00:01:00 到第 00:02:00 的部分：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -ss <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span> -i input.mp4 -to <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span> -c copy output.mp4<br></code></pre></td></tr></table></figure><h3 id="合并视频文件"><a href="#合并视频文件" class="headerlink" title="合并视频文件"></a>合并视频文件</h3><p>将多个视频文件合并为一个。首先，创建一个文本文件 <code>filelist.txt</code>，内容如下：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video1.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video2.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;video3.mp4&#x27;</span><br></code></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ffmpeg -f <span class="hljs-built_in">concat</span> -safe <span class="hljs-number">0</span> -i filelist.txt -c copy <span class="hljs-built_in">output</span>.mp4<br></code></pre></td></tr></table></figure><h3 id="转换视频编码"><a href="#转换视频编码" class="headerlink" title="转换视频编码"></a>转换视频编码</h3><p>将视频编码转换为 H.264 编码，音频编码为 AAC：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mkv</span> -c:v libx264 -c:<span class="hljs-selector-tag">a</span> aac output.mp4<br></code></pre></td></tr></table></figure><h3 id="调整视频分辨率"><a href="#调整视频分辨率" class="headerlink" title="调整视频分辨率"></a>调整视频分辨率</h3><p>将视频分辨率调整为 1280x720：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i input.mp4 -vf scale=<span class="hljs-number">1280</span>:<span class="hljs-number">720</span> output.mp4<br></code></pre></td></tr></table></figure><h3 id="压缩视频文件大小"><a href="#压缩视频文件大小" class="headerlink" title="压缩视频文件大小"></a>压缩视频文件大小</h3><p>通过调整比特率来压缩视频文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">b</span>:v <span class="hljs-number">1000</span>k -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">128</span>k output.mp4<br></code></pre></td></tr></table></figure><h3 id="添加字幕"><a href="#添加字幕" class="headerlink" title="添加字幕"></a>添加字幕</h3><p>将外部字幕文件（如 SRT）嵌入到视频中：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> subtitles<span class="hljs-selector-class">.srt</span> -c copy -c:s mov_text output.mp4<br></code></pre></td></tr></table></figure><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制全屏视频，保存为 <code>output.mp4</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -f gdigrab -framerate <span class="hljs-number">30</span> -i desktop output.mp4<br></code></pre></td></tr></table></figure><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>FFmpeg 具有极其丰富的功能，以下是一些高级应用场景：</p><h3 id="流媒体推流"><a href="#流媒体推流" class="headerlink" title="流媒体推流"></a>流媒体推流</h3><p>将视频流推送到 RTMP 服务器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bash<br><br><br>复制代码<br>ffmpeg -re -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -preset veryfast -maxrate <span class="hljs-number">3000</span>k -bufsize <span class="hljs-number">6000</span>k -c:<span class="hljs-selector-tag">a</span> aac -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">160</span>k -f flv rtmp:<span class="hljs-comment">//yourserver/live/stream</span><br></code></pre></td></tr></table></figure><h3 id="视频水印"><a href="#视频水印" class="headerlink" title="视频水印"></a>视频水印</h3><p>在视频上添加图片水印：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bash<br><br><br>复制代码<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> watermark<span class="hljs-selector-class">.png</span> -filter_complex <span class="hljs-string">&quot;overlay=10:10&quot;</span> output.mp4<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ffmpeg.org/documentation.html">FFmpeg 官方文档</a></li><li><a href="https://ffmpeg.org.cn/">FFmpeg 中文网</a></li><li><a href="https://www.ffmpeg.org/ffmpeg.html">FFmpeg 命令大全</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg windos tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2安装docker和配置docker compose并编排服务</title>
    <link href="/2024/10/27/WSL2%E5%AE%89%E8%A3%85docker%E5%92%8C%E9%85%8D%E7%BD%AEdocker-compose%E5%B9%B6%E7%BC%96%E6%8E%92%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/10/27/WSL2%E5%AE%89%E8%A3%85docker%E5%92%8C%E9%85%8D%E7%BD%AEdocker-compose%E5%B9%B6%E7%BC%96%E6%8E%92%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在WSL2下安装Docker和Docker Compose并创建一个 docker-compose.yml 文件来编排 MySQL、Redis 和 MongoDB 服务的步骤如下：</p><ol><li>安装Docker<br>首先在WSL2镜像上安装Docker：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io -y<br></code></pre></td></tr></table></figure><ol start="2"><li>安装Docker Compose<br>Docker Compose 是一个帮助你定义和运行多容器Docker应用的工具，使用以下命令来安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>然后，给予它执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>验证安装成功：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建docker-compose.yml文件<br>现在创建一个docker-compose.yml文件，将 MySQL、Redis 和 MongoDB 定义为服务，并将它们的数据目录映射到宿主机上。</li></ol><p>在你喜欢的目录中创建 docker-compose.yml 文件然后编辑文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-container</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">rootpassword</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">mydb</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">user</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">password</span><br>    <span class="hljs-attr">ports:</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>     <span class="hljs-attr">lumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql_data:/var/lib/mysql</span><br>          <span class="hljs-attr">tworks:</span><br>             <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-container</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis_data:/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br>  <span class="hljs-attr">mongo:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo-container</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;27017:27017&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongo_data:/data/db</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">backend:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br><br></code></pre></td></tr></table></figure><p>4.启动服务<br>保存并退出编辑器，然后运行以下命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>这将启动 MySQL、Redis 和 MongoDB 三个容器，并使它们在后台运行。</p><ol start="5"><li>登录到 MySQL、Redis 和 MongoDB<br>现在，分别登录到这些服务中。</li></ol><p>登录到MySQL：<br>使用以下命令连接到 MySQL 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql-container mysql -u root -p<br></code></pre></td></tr></table></figure><p>你将会提示输入密码，输入你在 docker-compose.yml 文件中设置的 MYSQL_ROOT_PASSWORD (rootpassword)。</p><p>登录到Redis：<br>使用以下命令连接到 Redis 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-container redis-cli<br></code></pre></td></tr></table></figure><p>登录到MongoDB：<br>使用以下命令连接到 Mongo 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongo-container mongo<br></code></pre></td></tr></table></figure><ol start="6"><li>检查数据持久化<br>服务的数据将映射到宿主机的目录中（.&#x2F;mysql_data、.&#x2F;redis_data 和 .&#x2F;mongo_data），可以通过这些文件夹查看服务的持久化数据。</li></ol><p>总结<br>你现在已经在WSL2系统中安装了Docker和Docker Compose，并使用 docker-compose.yml 文件编排 MySQL、Redis 和 MongoDB 服务。服务启动后，可以通过 docker exec 命令登录到每个服务中，数据也被映射到宿主机的目录，确保数据持久化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>wsl windos docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JJWT 0.12.6更新学习</title>
    <link href="/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/24/JJWT%200.12.6%E6%9B%B4%E6%96%B0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>最近学习JWT时遇到许多方法显示已弃用,JWT更新速度非常快,网上的教程和AI回复大多缺乏时效性,因此我记录下更新学习的过程;本文参考JWT GitHub首页:</p><p><a href="https://github.com/jwtk/jjwt?tab=readme-ov-file">https://github.com/jwtk/jjwt?tab=readme-ov-file</a></p><p>;并感谢ChatGPT提供了详尽的解释.</p><p>JWT基础知识:</p><p><strong>JWT (JSON Web Token)</strong>:** 是一种基于JSON的令牌，用于在网络应用中安全地传输信息。它通常用于身份验证和授权。JWT由三部分组成：<code>Header</code>、<code>Payload</code> 和 <code>Signature</code>，通过点号（<code>.</code>）分隔。JWT可以确保数据的完整性（不可篡改）并通过加密保证敏感信息的安全。</p><table><thead><tr><th align="left"><strong>部分</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>Header</strong></td><td>定义了JWT的元数据，主要包括签名算法和令牌类型。</td><td><code>json&lt;br&gt;&#123;&lt;br&gt; &quot;alg&quot;: &quot;HS256&quot;,&lt;br&gt; &quot;typ&quot;: &quot;JWT&quot;&lt;br&gt;&#125;</code></td></tr><tr><td align="left"><strong>Payload</strong></td><td>包含实际传递的数据（声明），可以包括注册声明、公共声明和私有声明。</td><td><code>json&lt;br&gt;&#123;&lt;br&gt; &quot;sub&quot;: &quot;1234567890&quot;,&lt;br&gt; &quot;name&quot;: &quot;John Doe&quot;,&lt;br&gt; &quot;admin&quot;: true,&lt;br&gt; &quot;exp&quot;: 1516239022&lt;br&gt;&#125;</code></td></tr><tr><td align="left"><strong>Signature</strong></td><td>用于验证JWT的完整性和真实性，通过对Header和Payload进行签名生成。</td><td><code>HMACSHA256(base64UrlEncode(Header) + &quot;.&quot; + base64UrlEncode(Payload), secret)</code></td></tr></tbody></table><p><strong>JJWT(Java JWT)</strong>:** 是一个Java库，用于创建和验证JWT（JSON Web Token）。它简化了在Java应用中使用JWT的过程。JJWT由一个开源社区开发，支持生成、解析和验证JWT的功能。本文学习的是最新的JJWT。</p><p><strong>JWS(JSON Web Signature):</strong> 是一种用来生成和验证数字签名的标准，基于JSON格式。JWS确保了数据的完整性和真实性。JWT的签名部分实际上就是使用了JWS。</p><p><strong>JWE(JSON Web Encryption)</strong>: 是一种用来加密数据的标准，也基于JSON格式。JWE与JWS不同之处在于，JWS保证数据的完整性（数据不可篡改），而JWE确保数据的机密性（数据加密后不可被读取）。</p><p>1.引入依赖</p><p>引入JWT最新的maven依赖:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>  &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson <span class="hljs-keyword">if</span> Gson is preferred --&gt;<br>  &lt;version&gt;<span class="hljs-number">0.12</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2.生成JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生成一个HS256算法的密钥</span><br><span class="hljs-type">SecretKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Jwts.SIG.HS256.key().build();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">jws</span> <span class="hljs-operator">=</span> Jwts.builder()<br>           <span class="hljs-comment">// 设置JWT的主体部分，通常包含用户标识</span><br>           .subject(<span class="hljs-string">&quot;sub&quot;</span>) <br>           <br>           <span class="hljs-comment">// 添加自定义声明</span><br>           .claim(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>)<br>           <br>           <span class="hljs-comment">// 生成的密钥对JWT进行签名</span><br>           .signWith(key)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行者信息</span><br>           .issuer(<span class="hljs-string">&quot;example.com&quot;</span>)<br>           <br>           <span class="hljs-comment">// 设置JWT的发行时间</span><br>           .issuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>           <br>           <span class="hljs-comment">// 设置JWT的过期时间，这里设置为当前时间加1小时</span><br>           .expiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">3600000</span>))<br>           <br>           <span class="hljs-comment">//生成最终的JWT字符串</span><br>           .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.解析JWS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Jws&lt;Claims&gt; claimsJws = Jwts.parser()<br>        <span class="hljs-comment">// 使用指定的密钥验证JWT的签名</span><br>        .verifyWith(key)<br>        .build()<br>        <span class="hljs-comment">// 解析JWT并验证其签名，返回包含claims的Jws对象</span><br>        .parseSignedClaims(jws);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java Spring JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring  Vue3实现ToDoList待办事项列表</title>
    <link href="/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/"/>
    <url>/2024/10/24/Spring-Vue3%E5%AE%9E%E7%8E%B0ToDoList%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>为了熟悉spring,练习TodoList的实例,以本文记录学习过程:</p><p>1.添加相关依赖:本项目使用的是spring boot+vue3 数据库使用MySQL,持久层使用JPA</p><p>后端Api</p><p>2.建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table todo(id int auto_increment primary key ,<br>                title varchar(50) ,<br>                description varchar(100),<br>                completed boolean default false,<br>                created_at TIMESTAMP default CURRENT_TIMESTAMP);<br></code></pre></td></tr></table></figure><p>3.application.properties配置数据库连接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/todolist</span><br></code></pre></td></tr></table></figure><p>4.创建实体类Todo并使用JPA注解映射数据库表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;todo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> completed;<br><br>    <span class="hljs-meta">@Temporal(TemporalType.TIMESTAMP)</span> <span class="hljs-comment">//指定create_at字段为时间戳类型</span><br>    <span class="hljs-keyword">private</span> Date create_at;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">TodoRepository</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">Todo</span>,<span class="hljs-symbol">Integer</span>&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.完成TodoService,实现对Todo的操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-title class_">TodoRepository</span> todoRepository;<br>    <span class="hljs-title class_">Todo</span> todo;<br><br>    <span class="hljs-comment">//列出所有Todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findAllTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> todoRepository.<span class="hljs-title function_">findAll</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">finTodoById</span>(<span class="hljs-params">int id</span>)&#123; <span class="hljs-comment">//使用Optional包装,避免返回null</span><br>        <span class="hljs-keyword">return</span> todoRepository.<span class="hljs-title function_">findById</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Todo</span> newTodo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Todo</span>();<br>        <span class="hljs-keyword">return</span> newTodo;<br>    &#125;<br><br>    <span class="hljs-comment">//修改todo</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"><span class="hljs-title class_">Todo</span> todo, <span class="hljs-title class_">String</span> title, <span class="hljs-title class_">String</span> description, <span class="hljs-built_in">boolean</span> completed</span>) &#123;<br>        todo.<span class="hljs-title function_">setTitle</span>(title);<br>        todo.<span class="hljs-title function_">setDescription</span>(description);<br>        todo.<span class="hljs-title function_">setCompleted</span>(completed);<br>    &#125;<br><br>    <span class="hljs-comment">//删除todo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">int id</span>)&#123;<br>        <span class="hljs-keyword">if</span> (todoRepository.<span class="hljs-title function_">findById</span>(id).<span class="hljs-title function_">isPresent</span>())&#123;<br>            todoRepository.<span class="hljs-title function_">deleteById</span>(id);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>5.完成TodoController,调用服务层方法,实现后端接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/todo&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-title class_">TodoService</span> todoService;<br>    <span class="hljs-title class_">Todo</span> todo;<br><br>    <span class="hljs-comment">//列出所有Todo</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findAllTodo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">findAllTodo</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查找Todo</span><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Todo</span>&gt; <span class="hljs-title function_">findTodoById</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id</span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">finTodoById</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//添加Todo</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> <span class="hljs-title class_">Todo</span> newTodo</span>)&#123;<br>        <span class="hljs-keyword">return</span> todoService.<span class="hljs-title function_">addTodo</span>(newTodo);<br>    &#125;<br><br>    <span class="hljs-comment">//删除Todo</span><br>    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id</span>)&#123;<br>       todoService.<span class="hljs-title function_">deleteTodo</span>(id);<br>    &#125;<br><br>    <span class="hljs-comment">//修改Todo</span><br>    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Todo</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span> int id,<span class="hljs-meta">@RequestBody</span> <span class="hljs-title class_">Todo</span> updatetodo</span>) &#123;<br>        todoService.<span class="hljs-title function_">updateTodo</span>(todo,updatetodo.<span class="hljs-title function_">getTitle</span>(), updatetodo.<span class="hljs-title function_">getDescription</span>(), updatetodo.<span class="hljs-title function_">isCompleted</span>());<br>        <span class="hljs-keyword">return</span> todo;<br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>前端页面</p><template>   <div class="todo-list">     <h1>待办事项</h1>     <form @submit.prevent="addTodo">       <input v-model="newTodo.title" placeholder="标题" required />       <input v-model="newTodo.description" placeholder="描述" />       <button type="submit">添加</button>     </form>     <ul>       <li v-for="todo in todos" :key="todo.id">         <span :class="{ completed: todo.completed }">            -          </span>         <button @click="toggleComplete(todo)">完成</button>         <button @click="deleteTodo(todo.id)">删除</button>       </li>     </ul>   </div></template><script> import axios from 'axios';<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">todos</span>: [],<br>       <span class="hljs-attr">newTodo</span>: &#123;<br>         <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>         <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>         <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>       &#125;<br>     &#125;;<br>   &#125;,<br>   <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 移到根对象</span><br>     <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fetchTodos</span>();<br>   &#125;,<br>   <span class="hljs-attr">methods</span>: &#123;<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetchTodos</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/todo/all&#x27;</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = response.<span class="hljs-property">data</span>;<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://localhost:8080/api/todo&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">push</span>(response.<span class="hljs-property">data</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span> = &#123;<br>           <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>         &#125;;<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">toggleComplete</span>(<span class="hljs-params">todo</span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">const</span> updatedTodo = &#123; ...todo, <span class="hljs-attr">completed</span>: !todo.<span class="hljs-property">completed</span> &#125;;<br>         <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">put</span>(<span class="hljs-string">`http://localhost:8080/api/todo/<span class="hljs-subst">$&#123;todo.id&#125;</span>`</span>, updatedTodo);<br>         <span class="hljs-keyword">const</span> insex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">indexOf</span>(todo);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">splice</span>(insex, <span class="hljs-number">1</span>, updatedTodo); <span class="hljs-comment">// 使用正确的变量名</span><br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;,<br>     <span class="hljs-keyword">async</span> <span class="hljs-title function_">deleteTodo</span>(<span class="hljs-params">id</span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`http://localhost:8080/api/todo/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> !== id);<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>       &#125;<br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></script><style scoped>#app { height: 90vh; display: flex; align-items: center; justify-content: center;}</style>]]></content>
    
    
    
    <tags>
      
      <tag>java, spring, vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/10/23/test/"/>
    <url>/2024/10/23/test/</url>
    
    <content type="html"><![CDATA[<p>宣州谢朓楼饯别校书叔云</p><p>李白</p><p>弃我去者，昨日之日不可留;乱我心者，今日之日多烦忧。</p><p>长风万里送秋雁，对此可以酣高楼。</p><p>蓬莱文章建安骨，中间小谢又清发。</p><p>俱怀逸兴壮思飞，欲上青天览明月。</p><p>抽刀断水水更流，举杯消愁愁更愁。</p><p>人生在世不称意，明朝散发弄扁舟。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
